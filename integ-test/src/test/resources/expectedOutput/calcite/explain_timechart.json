{
  "calcite": {
    "logical": "LogicalSystemLimit(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC], fetch=[10000], type=[QUERY_SIZE_LIMIT])\n  LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])\n    LogicalAggregate(group=[{0, 1}], avg(cpu_usage)=[SUM($2)])\n      LogicalProject(@timestamp=[$0], host=[CASE(IS NOT NULL($3), $1, CASE(IS NULL($1), null:NULL, 'OTHER'))], avg(cpu_usage)=[$2])\n        LogicalJoin(condition=[=($1, $3)], joinType=[left])\n          LogicalProject(@timestamp=[$1], host=[$0], $f2=[$2])\n            LogicalAggregate(group=[{0, 2}], agg#0=[AVG($1)])\n              LogicalProject(host=[$4], cpu_usage=[$7], $f3=[SPAN($1, 1, 'm')])\n                CalciteLogicalIndexScan(table=[[OpenSearch, events]])\n          LogicalSort(sort0=[$1], dir0=[DESC], fetch=[10])\n            LogicalAggregate(group=[{0}], grand_total=[SUM($1)])\n              LogicalProject(host=[$0], $f2=[$2])\n                LogicalAggregate(group=[{0, 2}], agg#0=[AVG($1)])\n                  LogicalProject(host=[$4], cpu_usage=[$7], $f3=[SPAN($1, 1, 'm')])\n                    CalciteLogicalIndexScan(table=[[OpenSearch, events]])\n",
    "physical": "EnumerableLimit(fetch=[10000])\n  EnumerableSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])\n    EnumerableAggregate(group=[{0, 1}], avg(cpu_usage)=[SUM($2)])\n      EnumerableCalc(expr#0..4=[{inputs}], expr#5=[IS NOT NULL($t3)], expr#6=[IS NULL($t1)], expr#7=[null:NULL], expr#8=['OTHER'], expr#9=[CASE($t6, $t7, $t8)], expr#10=[CASE($t5, $t1, $t9)], @timestamp=[$t0], host=[$t10], avg(cpu_usage)=[$t2])\n        EnumerableMergeJoin(condition=[=($1, $3)], joinType=[left])\n          EnumerableSort(sort0=[$1], dir0=[ASC])\n            EnumerableCalc(expr#0..3=[{inputs}], expr#4=[0], expr#5=[=($t3, $t4)], expr#6=[null:DOUBLE], expr#7=[CASE($t5, $t6, $t2)], expr#8=[/($t7, $t3)], @timestamp=[$t1], host=[$t0], $f2=[$t8])\n              EnumerableAggregate(group=[{0, 2}], agg#0=[$SUM0($1)], agg#1=[COUNT($1)])\n                EnumerableCalc(expr#0..2=[{inputs}], expr#3=[1], expr#4=['m'], expr#5=[SPAN($t2, $t3, $t4)], proj#0..1=[{exprs}], $f2=[$t5])\n                  CalciteEnumerableIndexScan(table=[[OpenSearch, events]], PushDownContext=[[PROJECT->[host, cpu_usage, @timestamp]], OpenSearchRequestBuilder(sourceBuilder={\"from\":0,\"timeout\":\"1m\",\"_source\":{\"includes\":[\"host\",\"cpu_usage\",\"@timestamp\"],\"excludes\":[]}}, requestedTotalSize=2147483647, pageSize=null, startFrom=0)])\n          EnumerableSort(sort0=[$0], dir0=[ASC])\n            EnumerableLimit(fetch=[10])\n              EnumerableSort(sort0=[$1], dir0=[DESC])\n                EnumerableAggregate(group=[{0}], grand_total=[SUM($2)])\n                  EnumerableCalc(expr#0..3=[{inputs}], expr#4=[0], expr#5=[=($t3, $t4)], expr#6=[null:DOUBLE], expr#7=[CASE($t5, $t6, $t2)], expr#8=[/($t7, $t3)], proj#0..1=[{exprs}], $f2=[$t8])\n                    EnumerableAggregate(group=[{0, 2}], agg#0=[$SUM0($1)], agg#1=[COUNT($1)])\n                      EnumerableCalc(expr#0..2=[{inputs}], expr#3=[1], expr#4=['m'], expr#5=[SPAN($t2, $t3, $t4)], proj#0..1=[{exprs}], $f2=[$t5])\n                        CalciteEnumerableIndexScan(table=[[OpenSearch, events]], PushDownContext=[[PROJECT->[host, cpu_usage, @timestamp]], OpenSearchRequestBuilder(sourceBuilder={\"from\":0,\"timeout\":\"1m\",\"_source\":{\"includes\":[\"host\",\"cpu_usage\",\"@timestamp\"],\"excludes\":[]}}, requestedTotalSize=2147483647, pageSize=null, startFrom=0)])\n"
  }
}