/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'java-library'
    id "io.freefair.lombok"
    id 'jacoco'
    id 'antlr'
    id 'com.diffplug.spotless' version '6.22.0'
    id 'com.github.johnrengelman.shadow'
}

repositories {
    mavenCentral()
}

tasks.register('downloadG4Files', Exec) {
    description = 'Download remote .g4 files from GitHub'

    executable 'curl'

    args '-o', 'src/main/antlr/FlintSparkSqlExtensions.g4', 'https://raw.githubusercontent.com/opensearch-project/opensearch-spark/main/flint-spark-integration/src/main/antlr4/FlintSparkSqlExtensions.g4'
    args '-o', 'src/main/antlr/SparkSqlBase.g4', 'https://raw.githubusercontent.com/opensearch-project/opensearch-spark/main/flint-spark-integration/src/main/antlr4/SparkSqlBase.g4'
    args '-o', 'src/main/antlr/SqlBaseParser.g4', 'https://raw.githubusercontent.com/apache/spark/master/sql/api/src/main/antlr4/org/apache/spark/sql/catalyst/parser/SqlBaseParser.g4'
    args '-o', 'src/main/antlr/SqlBaseLexer.g4', 'https://raw.githubusercontent.com/apache/spark/master/sql/api/src/main/antlr4/org/apache/spark/sql/catalyst/parser/SqlBaseLexer.g4'
}

generateGrammarSource {
    arguments += ['-visitor', '-package', 'org.opensearch.sql.asyncquery.antlr.parser']
    source = sourceSets.main.antlr
    outputDirectory = file("build/generated-src/antlr/main/org/opensearch/sql/asyncquery/antlr/parser")
}
configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

// Make sure the downloadG4File task runs before the generateGrammarSource task
generateGrammarSource.dependsOn downloadG4Files

dependencies {
    antlr "org.antlr:antlr4:4.7.1"

    implementation group: 'com.google.guava', name: 'guava', version: '32.0.1-jre'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${versions.jackson}"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${versions.jackson_databind}"
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-cbor', version: "${versions.jackson}"
    implementation 'com.google.code.gson:gson:2.8.9'

    testImplementation(platform("org.junit:junit-bom:5.9.3"))

    testCompileOnly('org.junit.jupiter:junit-jupiter')
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.7.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.7.0'

    testCompileOnly('junit:junit:4.13.1') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
        because 'allows tests to run from IDEs that bundle older version of launcher'
    }
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        googleJavaFormat('1.17.0').reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/antlr/parser/**'])
        }))
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = []
            limit {
                counter = 'LINE'
                minimum = 1.0
            }
            limit {
                counter = 'BRANCH'
                minimum = 1.0
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/antlr/parser/**'])
        }))
    }
}
check.dependsOn jacocoTestCoverageVerification

shadowJar {
    archiveBaseName.set('async-query-core')
    archiveVersion.set('1.0.0')  // Set the desired version
    archiveClassifier.set('all')

    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
}