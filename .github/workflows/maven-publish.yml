name: Publish artifacts to Maven

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 1.*
      - 2.*
      - poc/commit-metadata

jobs:
  # Job 1: Publish grammar files
  publish-grammar-files:
    name: Publish Grammar Files
    strategy:
      fail-fast: false
    #if: github.repository == 'opensearch-project/sql'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    env:
      SNAPSHOT_REPO_URL: https://aws.oss.sonatype.org/content/repositories/snapshots/
      TARGET_REPO_PATH: org/opensearch/language-grammar-poc2
      VERSION: 0.1.0-SNAPSHOT
      ARTIFACT_ID: language-grammar-poc2  # Explicitly define the artifact ID

    steps:
      - uses: actions/checkout@v4
        id: checkout

      - uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.PUBLISH_SNAPSHOTS_ROLE }}
          aws-region: us-east-1

      #Get Maven credentials
      - name: Setup publishing credentials
        id: creds
        run: |
          SONATYPE_USERNAME=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-username --query SecretString --output text)
          SONATYPE_PASSWORD=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-password --query SecretString --output text)
          echo "::add-mask::$SONATYPE_USERNAME"
          echo "::add-mask::$SONATYPE_PASSWORD"
          echo "SONATYPE_USERNAME=$SONATYPE_USERNAME" >> $GITHUB_ENV
          echo "SONATYPE_PASSWORD=$SONATYPE_PASSWORD" >> $GITHUB_ENV

      # Setup Java/Gradle
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Run Gradle to prepare grammar artifacts
      - name: Prepare grammar artifacts
        run: ./gradlew :language-grammar:prepareGrammarArtifacts

      # Create the initial directory structure in repository - FIXED to use env variable
      - name: Create grammar-poc directory structure in repository
        run: |
          TEMP_DIR=$(mktemp -d)
          echo "Directory placeholder - $(date)" > "${TEMP_DIR}/.placeholder"
          
          GROUP_PATH="org/opensearch"
          
          curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" \
            --upload-file "${TEMP_DIR}/.placeholder" \
            "${SNAPSHOT_REPO_URL}${GROUP_PATH}/${ARTIFACT_ID}/.placeholder"
          
          rm -rf "${TEMP_DIR}"

      # Capture commit ID
      - name: Set commit ID
        id: set_commit
        run: |
          COMMIT_ID=$(git log -1 --format='%H')
          echo "commit_id=${COMMIT_ID}" >> $GITHUB_OUTPUT
          echo "Using commit ID: ${COMMIT_ID}"

      # Checkout build libraries for publishing scripts
      - uses: actions/checkout@v4
        with:
          repository: 'opensearch-project/opensearch-build-libraries'
          path: 'build'

      # Publish to Maven
      - name: Publish grammar files to Maven
        run: |
          cd build/resources/publish/
          cp -a $HOME/.m2/repository/* ./
          ./publish-snapshot.sh ./

      # Update metadata with commit ID
      - name: Add commit ID to grammar metadata
        run: |
          COMMIT_ID="${{ steps.set_commit.outputs.commit_id }}"
          
          TEMP_DIR=$(mktemp -d)
          METADATA_FILE="${TEMP_DIR}/maven-metadata.xml"
          
          # Download existing metadata
          META_URL="${SNAPSHOT_REPO_URL}org/opensearch/${ARTIFACT_ID}/${VERSION}/maven-metadata.xml"
          curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${METADATA_FILE}" "${META_URL}"
          
          if [ -s "${METADATA_FILE}" ]; then
            cp "${METADATA_FILE}" "${METADATA_FILE}.bak"
          
            # Add commit ID to metadata
            awk -v commit="${COMMIT_ID}" '
              /<versioning>/ {
                print $0
                print "  <commitId>" commit "</commitId>"
                next
              }
              {print}
            ' "${METADATA_FILE}.bak" > "${METADATA_FILE}"
          
            # Upload modified metadata
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${METADATA_FILE}" "${META_URL}"
          
            # Update checksums
            cd "${TEMP_DIR}"
            sha256sum "maven-metadata.xml" | awk '{print $1}' > "maven-metadata.xml.sha256"
            sha512sum "maven-metadata.xml" | awk '{print $1}' > "maven-metadata.xml.sha512"
          
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "maven-metadata.xml.sha256" "${META_URL}.sha256"
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "maven-metadata.xml.sha512" "${META_URL}.sha512"
          
            echo "Version metadata updated with commit ID"
          else
            echo "Failed to download metadata, skipping commit ID addition"
          fi
          
          rm -rf "${TEMP_DIR}"

  # Job 2: Build and publish async-query-core JAR
  build-and-publish-snapshots:
    name: Publish Async Query Core
    needs: publish-grammar-files
    strategy:
      fail-fast: false
    if: github.repository == 'opensearch-project/sql'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    # Set credentials once at the job level
    env:
      SNAPSHOT_REPO_URL: https://aws.oss.sonatype.org/content/repositories/snapshots/
      DIR_NAME: direct-query-poc2
      GROUP_PATH: org/opensearch

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.PUBLISH_SNAPSHOTS_ROLE }}
          aws-region: us-east-1

      # Get and mask credentials once in a dedicated step
      - name: Setup publishing credentials
        id: creds
        run: |
          SONATYPE_USERNAME=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-username --query SecretString --output text)
          SONATYPE_PASSWORD=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-password --query SecretString --output text)
          echo "::add-mask::$SONATYPE_USERNAME"
          echo "::add-mask::$SONATYPE_PASSWORD"
          echo "SONATYPE_USERNAME=$SONATYPE_USERNAME" >> $GITHUB_ENV
          echo "SONATYPE_PASSWORD=$SONATYPE_PASSWORD" >> $GITHUB_ENV

      # Extract version information from build.gradle
      - name: Extract version from build.gradle
        id: extract_version
        run: |
          # Extract the base OpenSearch version
          OPENSEARCH_VERSION=$(grep -o 'opensearch_version = System.getProperty("opensearch.version", "[^"]*' build.gradle | sed 's/.*"\(.*\)"/\1/')
          # Extract the base version without qualifiers
          BASE_VERSION=$(echo $OPENSEARCH_VERSION | cut -d'-' -f1)
          # Full version with snapshot
          VERSION="${BASE_VERSION}.0-SNAPSHOT"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

      # Capture the commit ID for metadata purposes
      - name: Set commit ID
        id: set_commit
        run: |
          COMMIT_ID=$(git log -1 --format='%H')
          echo "commit_id=${COMMIT_ID}" >> $GITHUB_OUTPUT
          echo "Using commit ID: ${COMMIT_ID}"

      # NEW STEP: Create directory structure for direct-query-poc2 in repository
      - name: Create direct-query directory structure in repository
        run: |
          TEMP_DIR=$(mktemp -d)
          echo "Directory placeholder - $(date)" > "${TEMP_DIR}/.placeholder"
          
          # Create the initial directory structure in repository
          curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" \
            --upload-file "${TEMP_DIR}/.placeholder" \
            "${SNAPSHOT_REPO_URL}${GROUP_PATH}/${DIR_NAME}/.placeholder"
          
          echo "Created directory structure for ${GROUP_PATH}/${DIR_NAME}"
          rm -rf "${TEMP_DIR}"

      # Prepare JAR using Gradle
      - name: Prepare async-query artifact
        run: |
          ./gradlew :async-query-core:prepareAsyncQueryArtifacts -PopensearchVersion="${{ steps.extract_version.outputs.VERSION }}" -PmavenDirName="${DIR_NAME}"

      # Checkout opensearch-build-libraries repository for publishing scripts
      - uses: actions/checkout@v4
        with:
          repository: 'opensearch-project/opensearch-build-libraries'
          path: 'build'

      # Publish to Maven
      - name: Publish JAR to Maven
        run: |
          cd build/resources/publish/
          cp -a $HOME/.m2/repository/* ./
          ./publish-snapshot.sh ./

      # Update JAR metadata with commit ID
      - name: Update JAR metadata with commit ID
        run: |
          COMMIT_ID="${{ steps.set_commit.outputs.commit_id }}"
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          
          TEMP_DIR=$(mktemp -d)
          METADATA_FILE="${TEMP_DIR}/maven-metadata.xml"
          
          # Download metadata from repository
          META_URL="${SNAPSHOT_REPO_URL}${GROUP_PATH}/${DIR_NAME}/${VERSION}/maven-metadata.xml"
          echo "Downloading metadata from ${META_URL}"
          
          # Try to download the metadata file
          curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${METADATA_FILE}" "${META_URL}"
          
          # If successful, modify and upload back
          if [ -s "${METADATA_FILE}" ]; then
            echo "Modifying metadata for ${VERSION}"
            cp "${METADATA_FILE}" "${METADATA_FILE}.bak"
          
            awk -v commit="${COMMIT_ID}" '
              /<versioning>/ {
                print $0
                print "  <commitId>" commit "</commitId>"
                next
              }
              {print}
            ' "${METADATA_FILE}.bak" > "${METADATA_FILE}"
          
            # Upload modified file back
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${METADATA_FILE}" "${META_URL}"
          
            # Update the SHA checksums
            cd "${TEMP_DIR}"
            sha256sum "maven-metadata.xml" | awk '{print $1}' > "maven-metadata.xml.sha256"
            sha512sum "maven-metadata.xml" | awk '{print $1}' > "maven-metadata.xml.sha512"
          
            # Upload the checksums
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "maven-metadata.xml.sha256" "${META_URL}.sha256"
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "maven-metadata.xml.sha512" "${META_URL}.sha512"
          
            echo "Updated metadata and checksums for ${VERSION}"
          else
            echo "Failed to download metadata for ${VERSION}"
            exit 1
          fi
          
          rm -rf "${TEMP_DIR}"