{
  "calcite": {
    "logical": "LogicalProject(age2=[$2])\n  LogicalFilter(condition=[<=($3, 1)])\n    LogicalProject(avg_age=[$0], state=[$1], age2=[$2], _row_number_=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $2)])\n      LogicalFilter(condition=[IS NOT NULL($2)])\n        LogicalProject(avg_age=[$0], state=[$1], age2=[+($0, 2)])\n          LogicalSort(sort0=[$1], dir0=[ASC-nulls-first])\n            LogicalProject(avg_age=[$2], state=[$0], city=[$1])\n              LogicalAggregate(group=[{0, 1}], avg_age=[AVG($2)])\n                LogicalProject(state=[$7], city=[$5], age=[$8])\n                  LogicalFilter(condition=[>($8, 30)])\n                    CalciteLogicalIndexScan(table=[[OpenSearch, opensearch-sql_test_index_account]])\n",
    "physical": "EnumerableCalc(expr#0..2=[{inputs}], expr#3=[1], expr#4=[<=($t2, $t3)], age2=[$t1], $condition=[$t4])\n  EnumerableWindow(window#0=[window(partition {1} order by [1] rows between UNBOUNDED PRECEDING and CURRENT ROW aggs [ROW_NUMBER()])])\n    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[0], expr#5=[=($t3, $t4)], expr#6=[null:BIGINT], expr#7=[CASE($t5, $t6, $t2)], expr#8=[CAST($t7):DOUBLE], expr#9=[/($t8, $t3)], expr#10=[2], expr#11=[+($t9, $t10)], expr#12=[IS NOT NULL($t8)], state=[$t1], age2=[$t11], $condition=[$t12])\n      EnumerableSort(sort0=[$1], dir0=[ASC-nulls-first])\n        EnumerableAggregate(group=[{5, 7}], agg#0=[$SUM0($8)], agg#1=[COUNT($8)])\n          EnumerableCalc(expr#0..16=[{inputs}], expr#17=[30], expr#18=[>($t8, $t17)], proj#0..16=[{exprs}], $condition=[$t18])\n            CalciteEnumerableIndexScan(table=[[OpenSearch, opensearch-sql_test_index_account]])\n"
  }
}
