/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'java-library'
    id "io.freefair.lombok"
    id 'jacoco'
    id 'antlr'
    id 'com.diffplug.spotless' version '6.22.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.google.guava', name: 'guava', version: '32.0.1-jre'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${versions.jackson}"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${versions.jackson_databind}"
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-cbor', version: "${versions.jackson}"
    implementation 'com.google.code.gson:gson:2.8.9'

    testImplementation('org.junit.jupiter:junit-jupiter:5.9.3')
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.7.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.7.0'
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        importOrder()
//        licenseHeader("/*\n" +
//                " * Copyright OpenSearch Contributors\n" +
//                " * SPDX-License-Identifier: Apache-2.0\n" +
//                " */\n\n")
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        googleJavaFormat('1.17.0').reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    executionData test
}

jacocoTestCoverageVerification {
    dependsOn test
    executionData test
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                minimum = 1.0
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 1.0
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport