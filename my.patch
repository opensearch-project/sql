From bd434ec5105b90491c1eb0f7129b606655465919 Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Wed, 26 Feb 2025 09:14:40 -0800
Subject: [PATCH 01/12] mark places to change

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 docs/user/interfaces/protocol.rst                         | 1 +
 .../test/java/org/opensearch/sql/legacy/ExplainIT.java    | 1 +
 .../org/opensearch/sql/legacy/GetEndpointQueryIT.java     | 1 +
 .../opensearch/sql/legacy/OpenSearchSQLRestTestCase.java  | 1 +
 .../java/org/opensearch/sql/legacy/SQLIntegTestCase.java  | 8 ++++++++
 .../legacy/executor/ActionRequestRestExecutorFactory.java | 2 +-
 .../java/org/opensearch/sql/legacy/executor/Format.java   | 2 +-
 .../sql/legacy/query/OpenSearchActionFactory.java         | 2 ++
 .../sql/legacy/unittest/SqlRequestParamTest.java          | 1 +
 .../unittest/planner/OpenSearchActionFactoryTest.java     | 1 +
 .../sql/legacy/unittest/query/DefaultQueryActionTest.java | 1 +
 11 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/docs/user/interfaces/protocol.rst b/docs/user/interfaces/protocol.rst
index 52674b992..24e803ce9 100644
--- a/docs/user/interfaces/protocol.rst
+++ b/docs/user/interfaces/protocol.rst
@@ -208,6 +208,7 @@ Result set::
 	  "status" : 400
 	}
 
+// TODO: deprecate json
 OpenSearch DSL
 ==============
 
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/ExplainIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/ExplainIT.java
index 1b740924c..2059c8462 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/ExplainIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/ExplainIT.java
@@ -245,6 +245,7 @@ public class ExplainIT extends SQLIntegTestCase {
         result.replaceAll("\\s+", ""), equalTo(expectedOutput.replaceAll("\\s+", "")));
   }
 
+  // TODO: is this test running without @Test?
   public void testContentTypeOfExplainRequestShouldBeJson() throws IOException {
     String query = makeRequest("SELECT firstname FROM opensearch-sql_test_index_account");
     Request request = getSqlRequest(query, true);
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/GetEndpointQueryIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/GetEndpointQueryIT.java
index 6cc4aba81..a74ddde65 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/GetEndpointQueryIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/GetEndpointQueryIT.java
@@ -13,6 +13,7 @@ import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.opensearch.client.ResponseException;
 
+// TODO: inaccurate comment? Find out purpose of this test
 /** Tests to cover requests with "?format=csv" parameter */
 public class GetEndpointQueryIT extends SQLIntegTestCase {
 
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/OpenSearchSQLRestTestCase.java b/integ-test/src/test/java/org/opensearch/sql/legacy/OpenSearchSQLRestTestCase.java
index ced69d54a..6b57310a9 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/OpenSearchSQLRestTestCase.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/OpenSearchSQLRestTestCase.java
@@ -181,6 +181,7 @@ public abstract class OpenSearchSQLRestTestCase extends OpenSearchRestTestCase {
     }
   }
 
+  // TODO: deprecate json
   protected static void wipeAllOpenSearchIndices(RestClient client) throws IOException {
     // include all the indices, included hidden indices.
     // https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html#cat-indices-api-query-params
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
index f59fe82fa..213401ec5 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
@@ -228,6 +228,8 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     loadIndex(index, client());
   }
 
+  // TODO: deprecate json
+  // Note that explain queries are still supposed to return json
   protected Request getSqlRequest(String request, boolean explain) {
     return getSqlRequest(request, explain, "json");
   }
@@ -266,10 +268,12 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     }
   }
 
+  // DONE: verified all usages have requestType="jdbc" except in CsvFormatIT and RawFormatIT
   protected String executeQuery(String query, String requestType) {
     return executeQuery(query, requestType, Map.of());
   }
 
+  // DONE: verified usages don't contain requestType="json"
   protected String executeQuery(String query, String requestType, Map<String, String> params) {
     try {
       String endpoint = "/_plugins/_sql?format=" + requestType;
@@ -293,6 +297,7 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     return new JSONObject(executeQuery(query, "jdbc"));
   }
 
+  // DONE: verified usages don't contain requestType="json"
   protected String executeFetchQuery(String query, int fetchSize, String requestType)
       throws IOException {
     String endpoint = "/_plugins/_sql?format=" + requestType;
@@ -317,6 +322,7 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     return executeQueryTemplate(queryTemplate, index, 4);
   }
 
+  // DONE: verified usages don't contain requestType="json"
   protected String executeFetchLessQuery(String query, String requestType) throws IOException {
 
     String endpoint = "/_plugins/_sql?format=" + requestType;
@@ -342,6 +348,7 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
       Assert.fail(utf8CharsetName + " not available");
     }
 
+    // TODO: deprecate json
     final String requestUrl =
         String.format(
             Locale.ROOT, "%s?sql=%s&format=%s", QUERY_API_ENDPOINT, urlEncodedQuery, "json");
@@ -394,6 +401,7 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     return executeRequest(request, client());
   }
 
+  // TODO: this returns json. Only used in GetEndpointQueryIT
   protected JSONObject executeQueryWithGetRequest(final String sqlQuery) throws IOException {
 
     final Request request = buildGetEndpointRequest(sqlQuery);
diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java b/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java
index c58bba9e2..8c6009248 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java
@@ -25,7 +25,7 @@ public class ActionRequestRestExecutorFactory {
     switch (format) {
       case CSV:
         return new AsyncRestExecutor(new CSVResultRestExecutor());
-      case JSON:
+      case JSON: // TODO: deprecate json
         return new AsyncRestExecutor(
             new ElasticDefaultRestExecutor(queryAction),
             action -> isJoin(action) || isUnionMinus(action));
diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/executor/Format.java b/legacy/src/main/java/org/opensearch/sql/legacy/executor/Format.java
index c47092f10..f17e2a1de 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/executor/Format.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/executor/Format.java
@@ -14,7 +14,7 @@ import lombok.RequiredArgsConstructor;
 @RequiredArgsConstructor
 public enum Format {
   JDBC("jdbc"),
-  JSON("json"),
+  JSON("json"), // TODO: deprecate json
   CSV("csv"),
   RAW("raw"),
   TABLE("table");
diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java b/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
index 49aa38ae5..3924b6e41 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
@@ -63,6 +63,7 @@ public class OpenSearchActionFactory {
 
   public static QueryAction create(Client client, String sql)
       throws SqlParseException, SQLFeatureNotSupportedException, SQLFeatureDisabledException {
+    // TODO: deprecate json
     return create(client, new QueryActionRequest(sql, new ColumnTypeProvider(), Format.JSON));
   }
 
@@ -192,6 +193,7 @@ public class OpenSearchActionFactory {
 
   @VisibleForTesting
   public static boolean shouldMigrateToQueryPlan(SQLQueryExpr expr, Format format) {
+    // TODO: deprecate json
     // The JSON format will return the OpenSearch aggregation result, which is not supported by the
     // QueryPlanner.
     if (format == Format.JSON) {
diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/SqlRequestParamTest.java b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/SqlRequestParamTest.java
index 0d29b5510..b35ee4c99 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/SqlRequestParamTest.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/SqlRequestParamTest.java
@@ -41,6 +41,7 @@ public class SqlRequestParamTest {
     assertFalse(SqlRequestParam.isPrettyFormat(ImmutableMap.of(QUERY_PARAMS_PRETTY, "unknown")));
   }
 
+  // TODO: deprecate json
   @Test
   public void shouldReturnJSONIfFormatParamsIsJSON() {
     assertEquals(
diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java
index 3443c2dec..9b550f379 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java
@@ -14,6 +14,7 @@ import org.opensearch.sql.legacy.query.OpenSearchActionFactory;
 import org.opensearch.sql.legacy.util.SqlParserUtils;
 
 public class OpenSearchActionFactoryTest {
+  // TODO: deprecate json
   @Test
   public void josnOutputRequestShouldNotMigrateToQueryPlan() {
     String sql = "SELECT age, MAX(balance) FROM account GROUP BY age";
diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java
index d290e4dd5..5471e37dd 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java
@@ -130,6 +130,7 @@ public class DefaultQueryActionTest {
     doReturn(settingFetchSize).when(mockSqlRequest).fetchSize();
     queryAction.setSqlRequest(mockSqlRequest);
 
+    // TODO: deprecate json
     Format[] formats = new Format[] {Format.CSV, Format.RAW, Format.JSON, Format.TABLE};
     for (Format format : formats) {
       queryAction.setFormat(format);
-- 
2.41.0


From 613da7c026c6b038af1951ab5489b6f87fe0bc08 Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Thu, 27 Feb 2025 09:25:35 -0800
Subject: [PATCH 02/12] remove dsl format from doc

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 docs/user/interfaces/protocol.rst | 68 -------------------------------
 1 file changed, 68 deletions(-)

diff --git a/docs/user/interfaces/protocol.rst b/docs/user/interfaces/protocol.rst
index 24e803ce9..625eed0f5 100644
--- a/docs/user/interfaces/protocol.rst
+++ b/docs/user/interfaces/protocol.rst
@@ -208,74 +208,6 @@ Result set::
 	  "status" : 400
 	}
 
-// TODO: deprecate json
-OpenSearch DSL
-==============
-
-Description
------------
-
-The plugin returns original response from OpenSearch in JSON. Because this is the native response from OpenSearch, extra efforts are needed to parse and interpret it.
-
-Example
--------
-
-SQL query::
-
-	>> curl -H 'Content-Type: application/json' -X POST localhost:9200/_plugins/_sql?format=json -d '{
-	  "query" : "SELECT firstname, lastname, age FROM accounts ORDER BY age LIMIT 2"
-	}'
-
-Result set::
-
-	{
-	  "_shards" : {
-	    "total" : 5,
-	    "failed" : 0,
-	    "successful" : 5,
-	    "skipped" : 0
-	  },
-	  "hits" : {
-	    "hits" : [
-	      {
-	        "_index" : "accounts",
-	        "_type" : "_doc",
-	        "_source" : {
-	          "firstname" : "Nanette",
-	          "age" : 28,
-	          "lastname" : "Bates"
-	        },
-	        "_id" : "13",
-	        "sort" : [
-	          28
-	        ],
-	        "_score" : null
-	      },
-	      {
-	        "_index" : "accounts",
-	        "_type" : "_doc",
-	        "_source" : {
-	          "firstname" : "Amber",
-	          "age" : 32,
-	          "lastname" : "Duke"
-	        },
-	        "_id" : "1",
-	        "sort" : [
-	          32
-	        ],
-	        "_score" : null
-	      }
-	    ],
-	    "total" : {
-	      "value" : 4,
-	      "relation" : "eq"
-	    },
-	    "max_score" : null
-	  },
-	  "took" : 100,
-	  "timed_out" : false
-	}
-
 CSV Format
 ==========
 
-- 
2.41.0


From 43fe0fa9cc54538fb38e90382eb9c91f9a88219c Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Thu, 27 Feb 2025 11:56:21 -0800
Subject: [PATCH 03/12] remove Format.JSON

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .../org/opensearch/sql/legacy/ExplainIT.java  |  1 -
 .../sql/legacy/GetEndpointQueryIT.java        |  2 --
 .../sql/legacy/OpenSearchSQLRestTestCase.java |  1 -
 .../sql/legacy/SQLIntegTestCase.java          | 12 ++----------
 .../ActionRequestRestExecutorFactory.java     | 15 +--------------
 .../sql/legacy/executor/Format.java           |  1 -
 .../sql/legacy/plugin/RestSqlAction.java      |  3 +--
 .../legacy/query/OpenSearchActionFactory.java | 13 +++----------
 .../legacy/unittest/SqlRequestParamTest.java  |  7 -------
 .../planner/OpenSearchActionFactoryTest.java  | 19 +++++--------------
 .../query/DefaultQueryActionTest.java         |  3 +--
 11 files changed, 13 insertions(+), 64 deletions(-)

diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/ExplainIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/ExplainIT.java
index 2059c8462..1b740924c 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/ExplainIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/ExplainIT.java
@@ -245,7 +245,6 @@ public class ExplainIT extends SQLIntegTestCase {
         result.replaceAll("\\s+", ""), equalTo(expectedOutput.replaceAll("\\s+", "")));
   }
 
-  // TODO: is this test running without @Test?
   public void testContentTypeOfExplainRequestShouldBeJson() throws IOException {
     String query = makeRequest("SELECT firstname FROM opensearch-sql_test_index_account");
     Request request = getSqlRequest(query, true);
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/GetEndpointQueryIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/GetEndpointQueryIT.java
index a74ddde65..6831dcfcc 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/GetEndpointQueryIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/GetEndpointQueryIT.java
@@ -13,8 +13,6 @@ import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.opensearch.client.ResponseException;
 
-// TODO: inaccurate comment? Find out purpose of this test
-/** Tests to cover requests with "?format=csv" parameter */
 public class GetEndpointQueryIT extends SQLIntegTestCase {
 
   @Rule public final ExpectedException rule = ExpectedException.none();
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/OpenSearchSQLRestTestCase.java b/integ-test/src/test/java/org/opensearch/sql/legacy/OpenSearchSQLRestTestCase.java
index 6b57310a9..ced69d54a 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/OpenSearchSQLRestTestCase.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/OpenSearchSQLRestTestCase.java
@@ -181,7 +181,6 @@ public abstract class OpenSearchSQLRestTestCase extends OpenSearchRestTestCase {
     }
   }
 
-  // TODO: deprecate json
   protected static void wipeAllOpenSearchIndices(RestClient client) throws IOException {
     // include all the indices, included hidden indices.
     // https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html#cat-indices-api-query-params
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
index 213401ec5..a9179a7b8 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
@@ -228,10 +228,8 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     loadIndex(index, client());
   }
 
-  // TODO: deprecate json
-  // Note that explain queries are still supposed to return json
   protected Request getSqlRequest(String request, boolean explain) {
-    return getSqlRequest(request, explain, "json");
+    return getSqlRequest(request, explain, "jdbc");
   }
 
   protected Request getSqlRequest(String request, boolean explain, String requestType) {
@@ -268,12 +266,10 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     }
   }
 
-  // DONE: verified all usages have requestType="jdbc" except in CsvFormatIT and RawFormatIT
   protected String executeQuery(String query, String requestType) {
     return executeQuery(query, requestType, Map.of());
   }
 
-  // DONE: verified usages don't contain requestType="json"
   protected String executeQuery(String query, String requestType, Map<String, String> params) {
     try {
       String endpoint = "/_plugins/_sql?format=" + requestType;
@@ -297,7 +293,6 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     return new JSONObject(executeQuery(query, "jdbc"));
   }
 
-  // DONE: verified usages don't contain requestType="json"
   protected String executeFetchQuery(String query, int fetchSize, String requestType)
       throws IOException {
     String endpoint = "/_plugins/_sql?format=" + requestType;
@@ -322,7 +317,6 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     return executeQueryTemplate(queryTemplate, index, 4);
   }
 
-  // DONE: verified usages don't contain requestType="json"
   protected String executeFetchLessQuery(String query, String requestType) throws IOException {
 
     String endpoint = "/_plugins/_sql?format=" + requestType;
@@ -348,10 +342,9 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
       Assert.fail(utf8CharsetName + " not available");
     }
 
-    // TODO: deprecate json
     final String requestUrl =
         String.format(
-            Locale.ROOT, "%s?sql=%s&format=%s", QUERY_API_ENDPOINT, urlEncodedQuery, "json");
+            Locale.ROOT, "%s?sql=%s&format=%s", QUERY_API_ENDPOINT, urlEncodedQuery, "jdbc");
     return new Request("GET", requestUrl);
   }
 
@@ -401,7 +394,6 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     return executeRequest(request, client());
   }
 
-  // TODO: this returns json. Only used in GetEndpointQueryIT
   protected JSONObject executeQueryWithGetRequest(final String sqlQuery) throws IOException {
 
     final Request request = buildGetEndpointRequest(sqlQuery);
diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java b/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java
index 8c6009248..a585c3c2c 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java
@@ -18,17 +18,12 @@ public class ActionRequestRestExecutorFactory {
    * call if necessary.
    *
    * @param format format of response
-   * @param queryAction query action
    * @return executor
    */
-  public static RestExecutor createExecutor(Format format, QueryAction queryAction) {
+  public static RestExecutor createExecutor(Format format) {
     switch (format) {
       case CSV:
         return new AsyncRestExecutor(new CSVResultRestExecutor());
-      case JSON: // TODO: deprecate json
-        return new AsyncRestExecutor(
-            new ElasticDefaultRestExecutor(queryAction),
-            action -> isJoin(action) || isUnionMinus(action));
       case JDBC:
       case RAW:
       case TABLE:
@@ -36,12 +31,4 @@ public class ActionRequestRestExecutorFactory {
         return new AsyncRestExecutor(new PrettyFormatRestExecutor(format.getFormatName()));
     }
   }
-
-  private static boolean isJoin(QueryAction queryAction) {
-    return queryAction instanceof OpenSearchJoinQueryAction;
-  }
-
-  private static boolean isUnionMinus(QueryAction queryAction) {
-    return queryAction instanceof MultiQueryAction;
-  }
 }
diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/executor/Format.java b/legacy/src/main/java/org/opensearch/sql/legacy/executor/Format.java
index f17e2a1de..b30602754 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/executor/Format.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/executor/Format.java
@@ -14,7 +14,6 @@ import lombok.RequiredArgsConstructor;
 @RequiredArgsConstructor
 public enum Format {
   JDBC("jdbc"),
-  JSON("json"), // TODO: deprecate json
   CSV("csv"),
   RAW("raw"),
   TABLE("table");
diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/plugin/RestSqlAction.java b/legacy/src/main/java/org/opensearch/sql/legacy/plugin/RestSqlAction.java
index a0e68ff54..9be2367dc 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/plugin/RestSqlAction.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/plugin/RestSqlAction.java
@@ -251,8 +251,7 @@ public class RestSqlAction extends BaseRestHandler {
       channel.sendResponse(new BytesRestResponse(OK, "application/json; charset=UTF-8", result));
     } else {
       RestExecutor restExecutor =
-          ActionRequestRestExecutorFactory.createExecutor(
-              SqlRequestParam.getFormat(params), queryAction);
+          ActionRequestRestExecutorFactory.createExecutor(SqlRequestParam.getFormat(params));
       // doing this hack because OpenSearch throws exception for un-consumed props
       Map<String, String> additionalParams = new HashMap<>();
       for (String paramName : responseParams()) {
diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java b/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
index 3924b6e41..93e721e52 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
@@ -63,8 +63,7 @@ public class OpenSearchActionFactory {
 
   public static QueryAction create(Client client, String sql)
       throws SqlParseException, SQLFeatureNotSupportedException, SQLFeatureDisabledException {
-    // TODO: deprecate json
-    return create(client, new QueryActionRequest(sql, new ColumnTypeProvider(), Format.JSON));
+    return create(client, new QueryActionRequest(sql, new ColumnTypeProvider(), Format.JDBC));
   }
 
   /**
@@ -117,7 +116,7 @@ public class OpenSearchActionFactory {
         } else {
           sqlExpr.accept(new TermFieldRewriter());
           // migrate aggregation to query planner framework.
-          if (shouldMigrateToQueryPlan(sqlExpr, request.getFormat())) {
+          if (shouldMigrateToQueryPlan(sqlExpr)) {
             return new QueryPlanQueryAction(
                 new QueryPlanRequestBuilder(
                     new BindingTupleQueryPlanner(client, sqlExpr, request.getTypeProvider())));
@@ -192,13 +191,7 @@ public class OpenSearchActionFactory {
   }
 
   @VisibleForTesting
-  public static boolean shouldMigrateToQueryPlan(SQLQueryExpr expr, Format format) {
-    // TODO: deprecate json
-    // The JSON format will return the OpenSearch aggregation result, which is not supported by the
-    // QueryPlanner.
-    if (format == Format.JSON) {
-      return false;
-    }
+  public static boolean shouldMigrateToQueryPlan(SQLQueryExpr expr) {
     QueryPlannerScopeDecider decider = new QueryPlannerScopeDecider();
     return decider.isInScope(expr);
   }
diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/SqlRequestParamTest.java b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/SqlRequestParamTest.java
index b35ee4c99..ee2f3ac74 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/SqlRequestParamTest.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/SqlRequestParamTest.java
@@ -41,13 +41,6 @@ public class SqlRequestParamTest {
     assertFalse(SqlRequestParam.isPrettyFormat(ImmutableMap.of(QUERY_PARAMS_PRETTY, "unknown")));
   }
 
-  // TODO: deprecate json
-  @Test
-  public void shouldReturnJSONIfFormatParamsIsJSON() {
-    assertEquals(
-        Format.JSON, SqlRequestParam.getFormat(ImmutableMap.of(QUERY_PARAMS_FORMAT, "json")));
-  }
-
   @Test
   public void shouldReturnDefaultFormatIfNoFormatParams() {
     assertEquals(Format.JDBC, SqlRequestParam.getFormat(ImmutableMap.of()));
diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java
index 9b550f379..44ad735ac 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java
@@ -14,21 +14,12 @@ import org.opensearch.sql.legacy.query.OpenSearchActionFactory;
 import org.opensearch.sql.legacy.util.SqlParserUtils;
 
 public class OpenSearchActionFactoryTest {
-  // TODO: deprecate json
-  @Test
-  public void josnOutputRequestShouldNotMigrateToQueryPlan() {
-    String sql = "SELECT age, MAX(balance) FROM account GROUP BY age";
-
-    assertFalse(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql), Format.JSON));
-  }
-
   @Test
   public void nestQueryShouldNotMigrateToQueryPlan() {
     String sql = "SELECT age, nested(balance) FROM account GROUP BY age";
 
     assertFalse(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql), Format.JDBC));
+        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 
   @Test
@@ -36,7 +27,7 @@ public class OpenSearchActionFactoryTest {
     String sql = "SELECT age FROM account ";
 
     assertFalse(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql), Format.JDBC));
+        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 
   @Test
@@ -44,7 +35,7 @@ public class OpenSearchActionFactoryTest {
     String sql = "SELECT age, COUNT(balance) FROM account ";
 
     assertTrue(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql), Format.JDBC));
+        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 
   @Test
@@ -52,7 +43,7 @@ public class OpenSearchActionFactoryTest {
     String sql = "SELECT age, MAX(balance) - MIN(balance) FROM account ";
 
     assertTrue(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql), Format.JDBC));
+        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 
   @Test
@@ -60,6 +51,6 @@ public class OpenSearchActionFactoryTest {
     String sql = "SELECT CAST(age AS DOUBLE) as alias FROM account GROUP BY alias";
 
     assertTrue(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql), Format.JDBC));
+        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 }
diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java
index 5471e37dd..bf5d79855 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java
@@ -130,8 +130,7 @@ public class DefaultQueryActionTest {
     doReturn(settingFetchSize).when(mockSqlRequest).fetchSize();
     queryAction.setSqlRequest(mockSqlRequest);
 
-    // TODO: deprecate json
-    Format[] formats = new Format[] {Format.CSV, Format.RAW, Format.JSON, Format.TABLE};
+    Format[] formats = new Format[] {Format.CSV, Format.RAW, Format.TABLE};
     for (Format format : formats) {
       queryAction.setFormat(format);
       queryAction.checkAndSetScroll();
-- 
2.41.0


From e3157aa37ac977c14ca37aa9156d055475d6e32c Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Fri, 28 Feb 2025 08:25:00 -0800
Subject: [PATCH 04/12] fix test case wip

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .../org/opensearch/sql/legacy/QueryIT.java    | 16 +++---
 .../sql/legacy/SQLIntegTestCase.java          | 50 ++++++++++++++++---
 2 files changed, 53 insertions(+), 13 deletions(-)

diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java
index 3fe8b50ee..66d79c2e9 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java
@@ -94,7 +94,6 @@ public class QueryIT extends SQLIntegTestCase {
         executeQuery(
             String.format(
                 Locale.ROOT, "SELECT * FROM %s LIMIT 1000", TestsConstants.TEST_INDEX_PHRASE));
-    Assert.assertTrue(response.has("hits"));
     Assert.assertEquals(6, getTotalHits(response));
   }
 
@@ -107,7 +106,6 @@ public class QueryIT extends SQLIntegTestCase {
                 "SELECT * FROM %s, %s LIMIT 2000",
                 TestsConstants.TEST_INDEX_BANK,
                 TestsConstants.TEST_INDEX_BANK_TWO));
-    Assert.assertTrue(response.has("hits"));
     Assert.assertEquals(14, getTotalHits(response));
   }
 
@@ -132,7 +130,7 @@ public class QueryIT extends SQLIntegTestCase {
   @Test
   public void selectAllWithMultipleFields() throws IOException {
     JSONObject response =
-        executeQuery(
+        executeQuery( // TODO: Multiple entries with same key: age=32 and age=32
             StringUtils.format(
                 "SELECT *, age, address FROM %s LIMIT 5", TestsConstants.TEST_INDEX_BANK));
 
@@ -152,7 +150,7 @@ public class QueryIT extends SQLIntegTestCase {
   @Test
   public void selectAllWithFieldAndGroupBy() throws IOException {
     JSONObject response =
-        executeQuery(
+        executeQuery( // TODO: Multiple entries with same key: age=28 and age=28
             StringUtils.format(
                 "SELECT *, age FROM %s GROUP BY age LIMIT 10", TestsConstants.TEST_INDEX_BANK));
 
@@ -650,11 +648,11 @@ public class QueryIT extends SQLIntegTestCase {
   @Test
   public void inTest() throws IOException {
     JSONObject response =
-        executeQuery(
+        executeQuery( // TODO: can't resolve Symbol(namespace=FIELD_NAME, name=age) in type env
             String.format(
                 Locale.ROOT,
                 "SELECT age FROM %s WHERE age IN (20, 22) LIMIT 1000",
-                TestsConstants.TEST_INDEX_PHRASE));
+                TestsConstants.TEST_INDEX_PHRASE)); // change to PEOPLE?
 
     JSONArray hits = getHits(response);
     for (int i = 0; i < hits.length(); i++) {
@@ -1186,6 +1184,7 @@ public class QueryIT extends SQLIntegTestCase {
     checkResponseSize(response, BANK_INDEX_MALE_FALSE);
   }
 
+  // TODO: aggregation format is different. check in json format first
   @Test
   public void testWhereWithBoolIsFalse() throws IOException {
     JSONObject response =
@@ -1370,6 +1369,7 @@ public class QueryIT extends SQLIntegTestCase {
     Assert.assertEquals(1, getTotalHits(response));
 
     JSONObject hit = hits.getJSONObject(0);
+    // TODO: JSONObject["parents"] not found.
     Assert.assertEquals("Eddard", getSource(hit).getJSONObject("parents").getString("father"));
   }
 
@@ -1826,7 +1826,7 @@ public class QueryIT extends SQLIntegTestCase {
     JSONArray hits = getHits(response);
     for (int i = 0; i < hits.length(); i++) {
       JSONObject hit = hits.getJSONObject(i);
-      JSONObject highlightFields = hit.getJSONObject("highlight");
+      JSONObject highlightFields = hit.getJSONObject("highlight"); // TODO: JSONObject["highlight"] not found.
 
       String phrase = highlightFields.getJSONArray("phrase").getString(0);
       Assert.assertTrue(phrase.contains("<b>fox</b>"));
@@ -1963,6 +1963,8 @@ public class QueryIT extends SQLIntegTestCase {
     JSONObject hit = getHits(response).getJSONObject(0);
     String age = hit.query("/_source/age").toString();
     String cases = age.equals("30") ? "1" : age.equals("40") ? "2" : "0";
+    // TODO: Cannot invoke "Object.toString()" because the return value of "org.json.JSONObject.query(String)" is null
+    // TODO: search for hit.query
 
     assertThat(cases, equalTo(hit.query("/fields/cases/0")));
   }
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
index a9179a7b8..7472c3ecf 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
@@ -493,17 +493,55 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     return String.format("{\"cursor\":\"%s\"}", cursor);
   }
 
+  /**
+   * Following methods adapts the jdbc response format to maintain compatibility with existing code that
+   * expects legacy json (hits) structure. Instead of refactoring all dependent testing code to work with
+   * the jdbc (schema/datarows) format, this adapter transforms the jdbc format into the json structure.
+   * Jdbc format:
+   * {
+   *   "schema": [{"name": "field1", "type": "text"}, ...],
+   *   "datarows": [[value1, value2, ...], ...]
+   * }
+   *
+   * Transformed to legacy json format:
+   * {
+   *   "hits": [{
+   *     "_source": {"field1": value1, ...}
+   *   }, ...]
+   * }
+   */
   protected JSONArray getHits(JSONObject response) {
-    Assert.assertTrue(response.getJSONObject("hits").has("hits"));
+    Assert.assertTrue(response.has("schema"));
+    Assert.assertTrue(response.has("datarows"));
+
+    JSONArray schema = response.getJSONArray("schema");
+    JSONArray datarows = response.getJSONArray("datarows");
+    JSONArray hits = new JSONArray();
+
+    for (int i = 0; i < datarows.length(); i++) {
+      JSONObject hit = new JSONObject();
+      JSONObject source = new JSONObject();
+      JSONArray row = datarows.getJSONArray(i);
+
+      for (int j = 0; j < schema.length(); j++) {
+        JSONObject schemaField = schema.getJSONObject(j);
+        String fieldName = schemaField.getString("name");
+        Object value = row.get(j);
+        if (value != JSONObject.NULL) { // TODO: need this?
+          source.put(fieldName, value);
+        }
+      }
+
+      hit.put("_source", source);
+      hits.put(hit);
+    }
 
-    return response.getJSONObject("hits").getJSONArray("hits");
+    return hits;
   }
 
   protected int getTotalHits(JSONObject response) {
-    Assert.assertTrue(response.getJSONObject("hits").has("total"));
-    Assert.assertTrue(response.getJSONObject("hits").getJSONObject("total").has("value"));
-
-    return response.getJSONObject("hits").getJSONObject("total").getInt("value");
+    Assert.assertTrue(response.has("total"));
+    return response.getInt("total");
   }
 
   protected JSONObject getSource(JSONObject hit) {
-- 
2.41.0


From 85e2566d4c6ae114c7ec9b264ac0dae2d7738d9c Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Fri, 28 Feb 2025 09:29:11 -0800
Subject: [PATCH 05/12] Revert "fix test case wip"

This reverts commit e3157aa37ac977c14ca37aa9156d055475d6e32c.

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .../org/opensearch/sql/legacy/QueryIT.java    | 16 +++---
 .../sql/legacy/SQLIntegTestCase.java          | 50 +++----------------
 2 files changed, 13 insertions(+), 53 deletions(-)

diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java
index 66d79c2e9..3fe8b50ee 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java
@@ -94,6 +94,7 @@ public class QueryIT extends SQLIntegTestCase {
         executeQuery(
             String.format(
                 Locale.ROOT, "SELECT * FROM %s LIMIT 1000", TestsConstants.TEST_INDEX_PHRASE));
+    Assert.assertTrue(response.has("hits"));
     Assert.assertEquals(6, getTotalHits(response));
   }
 
@@ -106,6 +107,7 @@ public class QueryIT extends SQLIntegTestCase {
                 "SELECT * FROM %s, %s LIMIT 2000",
                 TestsConstants.TEST_INDEX_BANK,
                 TestsConstants.TEST_INDEX_BANK_TWO));
+    Assert.assertTrue(response.has("hits"));
     Assert.assertEquals(14, getTotalHits(response));
   }
 
@@ -130,7 +132,7 @@ public class QueryIT extends SQLIntegTestCase {
   @Test
   public void selectAllWithMultipleFields() throws IOException {
     JSONObject response =
-        executeQuery( // TODO: Multiple entries with same key: age=32 and age=32
+        executeQuery(
             StringUtils.format(
                 "SELECT *, age, address FROM %s LIMIT 5", TestsConstants.TEST_INDEX_BANK));
 
@@ -150,7 +152,7 @@ public class QueryIT extends SQLIntegTestCase {
   @Test
   public void selectAllWithFieldAndGroupBy() throws IOException {
     JSONObject response =
-        executeQuery( // TODO: Multiple entries with same key: age=28 and age=28
+        executeQuery(
             StringUtils.format(
                 "SELECT *, age FROM %s GROUP BY age LIMIT 10", TestsConstants.TEST_INDEX_BANK));
 
@@ -648,11 +650,11 @@ public class QueryIT extends SQLIntegTestCase {
   @Test
   public void inTest() throws IOException {
     JSONObject response =
-        executeQuery( // TODO: can't resolve Symbol(namespace=FIELD_NAME, name=age) in type env
+        executeQuery(
             String.format(
                 Locale.ROOT,
                 "SELECT age FROM %s WHERE age IN (20, 22) LIMIT 1000",
-                TestsConstants.TEST_INDEX_PHRASE)); // change to PEOPLE?
+                TestsConstants.TEST_INDEX_PHRASE));
 
     JSONArray hits = getHits(response);
     for (int i = 0; i < hits.length(); i++) {
@@ -1184,7 +1186,6 @@ public class QueryIT extends SQLIntegTestCase {
     checkResponseSize(response, BANK_INDEX_MALE_FALSE);
   }
 
-  // TODO: aggregation format is different. check in json format first
   @Test
   public void testWhereWithBoolIsFalse() throws IOException {
     JSONObject response =
@@ -1369,7 +1370,6 @@ public class QueryIT extends SQLIntegTestCase {
     Assert.assertEquals(1, getTotalHits(response));
 
     JSONObject hit = hits.getJSONObject(0);
-    // TODO: JSONObject["parents"] not found.
     Assert.assertEquals("Eddard", getSource(hit).getJSONObject("parents").getString("father"));
   }
 
@@ -1826,7 +1826,7 @@ public class QueryIT extends SQLIntegTestCase {
     JSONArray hits = getHits(response);
     for (int i = 0; i < hits.length(); i++) {
       JSONObject hit = hits.getJSONObject(i);
-      JSONObject highlightFields = hit.getJSONObject("highlight"); // TODO: JSONObject["highlight"] not found.
+      JSONObject highlightFields = hit.getJSONObject("highlight");
 
       String phrase = highlightFields.getJSONArray("phrase").getString(0);
       Assert.assertTrue(phrase.contains("<b>fox</b>"));
@@ -1963,8 +1963,6 @@ public class QueryIT extends SQLIntegTestCase {
     JSONObject hit = getHits(response).getJSONObject(0);
     String age = hit.query("/_source/age").toString();
     String cases = age.equals("30") ? "1" : age.equals("40") ? "2" : "0";
-    // TODO: Cannot invoke "Object.toString()" because the return value of "org.json.JSONObject.query(String)" is null
-    // TODO: search for hit.query
 
     assertThat(cases, equalTo(hit.query("/fields/cases/0")));
   }
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
index 7472c3ecf..a9179a7b8 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
@@ -493,55 +493,17 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     return String.format("{\"cursor\":\"%s\"}", cursor);
   }
 
-  /**
-   * Following methods adapts the jdbc response format to maintain compatibility with existing code that
-   * expects legacy json (hits) structure. Instead of refactoring all dependent testing code to work with
-   * the jdbc (schema/datarows) format, this adapter transforms the jdbc format into the json structure.
-   * Jdbc format:
-   * {
-   *   "schema": [{"name": "field1", "type": "text"}, ...],
-   *   "datarows": [[value1, value2, ...], ...]
-   * }
-   *
-   * Transformed to legacy json format:
-   * {
-   *   "hits": [{
-   *     "_source": {"field1": value1, ...}
-   *   }, ...]
-   * }
-   */
   protected JSONArray getHits(JSONObject response) {
-    Assert.assertTrue(response.has("schema"));
-    Assert.assertTrue(response.has("datarows"));
-
-    JSONArray schema = response.getJSONArray("schema");
-    JSONArray datarows = response.getJSONArray("datarows");
-    JSONArray hits = new JSONArray();
-
-    for (int i = 0; i < datarows.length(); i++) {
-      JSONObject hit = new JSONObject();
-      JSONObject source = new JSONObject();
-      JSONArray row = datarows.getJSONArray(i);
-
-      for (int j = 0; j < schema.length(); j++) {
-        JSONObject schemaField = schema.getJSONObject(j);
-        String fieldName = schemaField.getString("name");
-        Object value = row.get(j);
-        if (value != JSONObject.NULL) { // TODO: need this?
-          source.put(fieldName, value);
-        }
-      }
-
-      hit.put("_source", source);
-      hits.put(hit);
-    }
+    Assert.assertTrue(response.getJSONObject("hits").has("hits"));
 
-    return hits;
+    return response.getJSONObject("hits").getJSONArray("hits");
   }
 
   protected int getTotalHits(JSONObject response) {
-    Assert.assertTrue(response.has("total"));
-    return response.getInt("total");
+    Assert.assertTrue(response.getJSONObject("hits").has("total"));
+    Assert.assertTrue(response.getJSONObject("hits").getJSONObject("total").has("value"));
+
+    return response.getJSONObject("hits").getJSONObject("total").getInt("value");
   }
 
   protected JSONObject getSource(JSONObject hit) {
-- 
2.41.0


From 5f0ac18fda02a46fe3bb81676e6c110b49164e22 Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Fri, 28 Feb 2025 10:51:29 -0800
Subject: [PATCH 06/12] ignore legacy test using json response format

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .../opensearch/sql/legacy/AggregationIT.java    |  1 +
 .../org/opensearch/sql/legacy/DateFormatIT.java |  1 +
 .../org/opensearch/sql/legacy/HashJoinIT.java   |  2 ++
 .../java/org/opensearch/sql/legacy/JoinIT.java  |  1 +
 .../org/opensearch/sql/legacy/MultiQueryIT.java |  2 ++
 .../java/org/opensearch/sql/legacy/OrderIT.java |  2 ++
 .../org/opensearch/sql/legacy/PluginIT.java     |  2 ++
 .../java/org/opensearch/sql/legacy/QueryIT.java |  1 +
 .../opensearch/sql/legacy/SQLIntegTestCase.java | 17 +++++++++++++++--
 9 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/AggregationIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/AggregationIT.java
index 490e9eb51..c2b24c9bb 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/AggregationIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/AggregationIT.java
@@ -38,6 +38,7 @@ import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore
 public class AggregationIT extends SQLIntegTestCase {
 
   @Override
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/DateFormatIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/DateFormatIT.java
index 388d90092..af88c4e57 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/DateFormatIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/DateFormatIT.java
@@ -29,6 +29,7 @@ import org.junit.Ignore;
 import org.junit.Test;
 import org.opensearch.sql.legacy.exception.SqlParseException;
 
+@Ignore
 public class DateFormatIT extends SQLIntegTestCase {
 
   private static final String SELECT_FROM =
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/HashJoinIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/HashJoinIT.java
index 02c55d8eb..f27c18b24 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/HashJoinIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/HashJoinIT.java
@@ -19,8 +19,10 @@ import java.util.Set;
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore
 /** Test new hash join algorithm by comparison with old implementation. */
 public class HashJoinIT extends SQLIntegTestCase {
 
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/JoinIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/JoinIT.java
index 8c2ea9647..af5434e99 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/JoinIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/JoinIT.java
@@ -31,6 +31,7 @@ import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore
 public class JoinIT extends SQLIntegTestCase {
 
   private static final String USE_NL_HINT = " /*! USE_NL*/";
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/MultiQueryIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/MultiQueryIT.java
index bee85ac31..9fdb0f30d 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/MultiQueryIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/MultiQueryIT.java
@@ -14,8 +14,10 @@ import java.util.Set;
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore
 public class MultiQueryIT extends SQLIntegTestCase {
 
   private static final String MINUS_SCROLL_DEFAULT_HINT =
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/OrderIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/OrderIT.java
index 20bed5d2e..ce46de48e 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/OrderIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/OrderIT.java
@@ -10,8 +10,10 @@ import static org.hamcrest.Matchers.equalTo;
 import java.io.IOException;
 import org.json.JSONArray;
 import org.json.JSONObject;
+import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore
 public class OrderIT extends SQLIntegTestCase {
 
   @Override
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/PluginIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/PluginIT.java
index 9305b1655..83fe0b94b 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/PluginIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/PluginIT.java
@@ -12,6 +12,7 @@ import static org.opensearch.sql.legacy.TestsConstants.TEST_INDEX_ACCOUNT;
 import java.io.IOException;
 import java.util.Locale;
 import org.json.JSONObject;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.opensearch.client.Request;
 import org.opensearch.client.RequestOptions;
@@ -19,6 +20,7 @@ import org.opensearch.client.Response;
 import org.opensearch.client.ResponseException;
 import org.opensearch.sql.plugin.rest.RestQuerySettingsAction;
 
+@Ignore
 public class PluginIT extends SQLIntegTestCase {
 
   @Override
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java
index 3fe8b50ee..aa905c6c4 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/QueryIT.java
@@ -40,6 +40,7 @@ import org.opensearch.client.ResponseException;
 import org.opensearch.core.rest.RestStatus;
 import org.opensearch.sql.legacy.utils.StringUtils;
 
+@Ignore
 public class QueryIT extends SQLIntegTestCase {
 
   /**
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
index a9179a7b8..c324b1090 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
@@ -228,8 +228,13 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     loadIndex(index, client());
   }
 
+  /**
+   * TODO: Decide what to do with legacy tests using json response format.
+   * OpenSearch DSL format is deprecated. Need to ensure that requests in legacy tests using the json response format
+   * are not invoked.
+   */
   protected Request getSqlRequest(String request, boolean explain) {
-    return getSqlRequest(request, explain, "jdbc");
+    return getSqlRequest(request, explain, "json");
   }
 
   protected Request getSqlRequest(String request, boolean explain, String requestType) {
@@ -330,6 +335,11 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
     return responseString;
   }
 
+  /**
+   * TODO: Decide what to do with legacy tests using json response format.
+   * OpenSearch DSL format is deprecated. Need to ensure that requests in legacy tests using the json response format
+   * are not invoked.
+   */
   protected Request buildGetEndpointRequest(final String sqlQuery) {
 
     final String utf8CharsetName = StandardCharsets.UTF_8.name();
@@ -344,7 +354,7 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
 
     final String requestUrl =
         String.format(
-            Locale.ROOT, "%s?sql=%s&format=%s", QUERY_API_ENDPOINT, urlEncodedQuery, "jdbc");
+            Locale.ROOT, "%s?sql=%s&format=%s", QUERY_API_ENDPOINT, urlEncodedQuery, "json");
     return new Request("GET", requestUrl);
   }
 
@@ -385,6 +395,9 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
 
   protected static String executeRequest(final Request request, RestClient client)
       throws IOException {
+    if (request.getParameters().get("format") == "json") {
+      throw new IOException("request type is json");
+    }
     Response response = client.performRequest(request);
     Assert.assertEquals(200, response.getStatusLine().getStatusCode());
     return getResponseBody(response);
-- 
2.41.0


From 3cbaf825356abba4b4de34d8b96bd13d73f0c124 Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Fri, 28 Feb 2025 11:00:18 -0800
Subject: [PATCH 07/12] spotlessApply

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .tool-versions                                   |  1 +
 .../opensearch/sql/legacy/SQLIntegTestCase.java  | 12 ++++++------
 .../ActionRequestRestExecutorFactory.java        |  3 ---
 .../planner/OpenSearchActionFactoryTest.java     | 16 +++++-----------
 4 files changed, 12 insertions(+), 20 deletions(-)
 create mode 100644 .tool-versions

diff --git a/.tool-versions b/.tool-versions
new file mode 100644
index 000000000..e95b9595e
--- /dev/null
+++ b/.tool-versions
@@ -0,0 +1 @@
+java adoptopenjdk-21.0.5+11.0.LTS
diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
index c324b1090..852675c8c 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
@@ -229,9 +229,9 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
   }
 
   /**
-   * TODO: Decide what to do with legacy tests using json response format.
-   * OpenSearch DSL format is deprecated. Need to ensure that requests in legacy tests using the json response format
-   * are not invoked.
+   * TODO: Decide what to do with legacy tests using json response format. OpenSearch DSL format is
+   * deprecated. Need to ensure that requests in legacy tests using the json response format are not
+   * invoked.
    */
   protected Request getSqlRequest(String request, boolean explain) {
     return getSqlRequest(request, explain, "json");
@@ -336,9 +336,9 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
   }
 
   /**
-   * TODO: Decide what to do with legacy tests using json response format.
-   * OpenSearch DSL format is deprecated. Need to ensure that requests in legacy tests using the json response format
-   * are not invoked.
+   * TODO: Decide what to do with legacy tests using json response format. OpenSearch DSL format is
+   * deprecated. Need to ensure that requests in legacy tests using the json response format are not
+   * invoked.
    */
   protected Request buildGetEndpointRequest(final String sqlQuery) {
 
diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java b/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java
index a585c3c2c..068c1b433 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/executor/ActionRequestRestExecutorFactory.java
@@ -7,9 +7,6 @@ package org.opensearch.sql.legacy.executor;
 
 import org.opensearch.sql.legacy.executor.csv.CSVResultRestExecutor;
 import org.opensearch.sql.legacy.executor.format.PrettyFormatRestExecutor;
-import org.opensearch.sql.legacy.query.QueryAction;
-import org.opensearch.sql.legacy.query.join.OpenSearchJoinQueryAction;
-import org.opensearch.sql.legacy.query.multi.MultiQueryAction;
 
 /** Created by Eliran on 26/12/2015. */
 public class ActionRequestRestExecutorFactory {
diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java
index 44ad735ac..008b0d618 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/planner/OpenSearchActionFactoryTest.java
@@ -9,7 +9,6 @@ import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
-import org.opensearch.sql.legacy.executor.Format;
 import org.opensearch.sql.legacy.query.OpenSearchActionFactory;
 import org.opensearch.sql.legacy.util.SqlParserUtils;
 
@@ -18,39 +17,34 @@ public class OpenSearchActionFactoryTest {
   public void nestQueryShouldNotMigrateToQueryPlan() {
     String sql = "SELECT age, nested(balance) FROM account GROUP BY age";
 
-    assertFalse(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
+    assertFalse(OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 
   @Test
   public void nonAggregationQueryShouldNotMigrateToQueryPlan() {
     String sql = "SELECT age FROM account ";
 
-    assertFalse(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
+    assertFalse(OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 
   @Test
   public void aggregationQueryWithoutGroupByShouldMigrateToQueryPlan() {
     String sql = "SELECT age, COUNT(balance) FROM account ";
 
-    assertTrue(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
+    assertTrue(OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 
   @Test
   public void aggregationQueryWithExpressionByShouldMigrateToQueryPlan() {
     String sql = "SELECT age, MAX(balance) - MIN(balance) FROM account ";
 
-    assertTrue(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
+    assertTrue(OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 
   @Test
   public void queryOnlyHasGroupByShouldMigrateToQueryPlan() {
     String sql = "SELECT CAST(age AS DOUBLE) as alias FROM account GROUP BY alias";
 
-    assertTrue(
-        OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
+    assertTrue(OpenSearchActionFactory.shouldMigrateToQueryPlan(SqlParserUtils.parse(sql)));
   }
 }
-- 
2.41.0


From c74b96b8a7e9f2e35a012eaf80f93c0a249b430d Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Fri, 28 Feb 2025 11:58:15 -0800
Subject: [PATCH 08/12] remove json param check in executeRequest

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .../test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java  | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
index 852675c8c..dc96e30cb 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/SQLIntegTestCase.java
@@ -395,9 +395,6 @@ public abstract class SQLIntegTestCase extends OpenSearchSQLRestTestCase {
 
   protected static String executeRequest(final Request request, RestClient client)
       throws IOException {
-    if (request.getParameters().get("format") == "json") {
-      throw new IOException("request type is json");
-    }
     Response response = client.performRequest(request);
     Assert.assertEquals(200, response.getStatusLine().getStatusCode());
     return getResponseBody(response);
-- 
2.41.0


From 48d512aa3632998409359ee4465a6c621bf3bbd8 Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Fri, 28 Feb 2025 15:43:19 -0800
Subject: [PATCH 09/12] fix getScriptFieldFromQuery can't get requestBuilder
 from QueryPlan

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .../org/opensearch/sql/legacy/plugin/SearchDao.java  |  2 +-
 .../sql/legacy/query/OpenSearchActionFactory.java    | 12 +++++++++---
 .../sql/legacy/unittest/JSONRequestTest.java         |  2 +-
 .../sql/legacy/util/CheckScriptContents.java         |  3 ++-
 4 files changed, 13 insertions(+), 6 deletions(-)

diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/plugin/SearchDao.java b/legacy/src/main/java/org/opensearch/sql/legacy/plugin/SearchDao.java
index 415b98f6b..10ca9ddae 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/plugin/SearchDao.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/plugin/SearchDao.java
@@ -45,6 +45,6 @@ public class SearchDao {
    */
   public QueryAction explain(QueryActionRequest queryActionRequest)
       throws SqlParseException, SQLFeatureNotSupportedException, SQLFeatureDisabledException {
-    return OpenSearchActionFactory.create(client, queryActionRequest);
+    return OpenSearchActionFactory.create(client, queryActionRequest, false);
   }
 }
diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java b/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
index 93e721e52..2f6ea1379 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
@@ -63,16 +63,22 @@ public class OpenSearchActionFactory {
 
   public static QueryAction create(Client client, String sql)
       throws SqlParseException, SQLFeatureNotSupportedException, SQLFeatureDisabledException {
-    return create(client, new QueryActionRequest(sql, new ColumnTypeProvider(), Format.JDBC));
+    return create(client, sql, false);
+  }
+
+  public static QueryAction create(Client client, String sql, boolean bypassMigrateToQueryPlan)
+      throws SqlParseException, SQLFeatureNotSupportedException, SQLFeatureDisabledException {
+    return create(client, new QueryActionRequest(sql, new ColumnTypeProvider(), Format.JDBC), bypassMigrateToQueryPlan);
   }
 
   /**
    * Create the compatible Query object based on the SQL query.
    *
    * @param request The SQL query.
+   * @param bypassMigrateToQueryPlan Avoid using QueryPlan.
    * @return Query object.
    */
-  public static QueryAction create(Client client, QueryActionRequest request)
+  public static QueryAction create(Client client, QueryActionRequest request, boolean bypassMigrateToQueryPlan)
       throws SqlParseException, SQLFeatureNotSupportedException, SQLFeatureDisabledException {
     String sql = request.getSql();
     // Remove line breaker anywhere and semicolon at the end
@@ -116,7 +122,7 @@ public class OpenSearchActionFactory {
         } else {
           sqlExpr.accept(new TermFieldRewriter());
           // migrate aggregation to query planner framework.
-          if (shouldMigrateToQueryPlan(sqlExpr)) {
+          if (!bypassMigrateToQueryPlan && shouldMigrateToQueryPlan(sqlExpr)) {
             return new QueryPlanQueryAction(
                 new QueryPlanRequestBuilder(
                     new BindingTupleQueryPlanner(client, sqlExpr, request.getTypeProvider())));
diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/JSONRequestTest.java b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/JSONRequestTest.java
index 5cf9c602a..c0ea8581e 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/JSONRequestTest.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/JSONRequestTest.java
@@ -435,7 +435,7 @@ public class JSONRequestTest {
     CheckScriptContents.stubMockClient(mockClient);
     QueryAction queryAction =
         OpenSearchActionFactory.create(
-            mockClient, new QueryActionRequest(sql, columnTypeProvider, Format.JDBC));
+            mockClient, new QueryActionRequest(sql, columnTypeProvider, Format.JDBC), false);
 
     SqlRequest sqlRequest = new SqlRequest(sql, jsonRequest);
     queryAction.setSqlRequest(sqlRequest);
diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/util/CheckScriptContents.java b/legacy/src/test/java/org/opensearch/sql/legacy/util/CheckScriptContents.java
index 2fe711c3b..c15bbc39f 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/util/CheckScriptContents.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/util/CheckScriptContents.java
@@ -63,7 +63,8 @@ public class CheckScriptContents {
     try {
       Client mockClient = mock(Client.class);
       stubMockClient(mockClient);
-      QueryAction queryAction = OpenSearchActionFactory.create(mockClient, query);
+      // Avoid creating QueryPlanQueryAction so that scriptFields is available
+      QueryAction queryAction = OpenSearchActionFactory.create(mockClient, query, true);
       SqlElasticRequestBuilder requestBuilder = queryAction.explain();
 
       SearchRequestBuilder request = (SearchRequestBuilder) requestBuilder.getBuilder();
-- 
2.41.0


From d0c1ef1b070c3c14817d2fef07bf9b2a2cef7855 Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Fri, 28 Feb 2025 15:52:57 -0800
Subject: [PATCH 10/12] spotlessApply

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .../sql/legacy/query/OpenSearchActionFactory.java         | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java b/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
index 2f6ea1379..ffa5b24fd 100644
--- a/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
+++ b/legacy/src/main/java/org/opensearch/sql/legacy/query/OpenSearchActionFactory.java
@@ -68,7 +68,10 @@ public class OpenSearchActionFactory {
 
   public static QueryAction create(Client client, String sql, boolean bypassMigrateToQueryPlan)
       throws SqlParseException, SQLFeatureNotSupportedException, SQLFeatureDisabledException {
-    return create(client, new QueryActionRequest(sql, new ColumnTypeProvider(), Format.JDBC), bypassMigrateToQueryPlan);
+    return create(
+        client,
+        new QueryActionRequest(sql, new ColumnTypeProvider(), Format.JDBC),
+        bypassMigrateToQueryPlan);
   }
 
   /**
@@ -78,7 +81,8 @@ public class OpenSearchActionFactory {
    * @param bypassMigrateToQueryPlan Avoid using QueryPlan.
    * @return Query object.
    */
-  public static QueryAction create(Client client, QueryActionRequest request, boolean bypassMigrateToQueryPlan)
+  public static QueryAction create(
+      Client client, QueryActionRequest request, boolean bypassMigrateToQueryPlan)
       throws SqlParseException, SQLFeatureNotSupportedException, SQLFeatureDisabledException {
     String sql = request.getSql();
     // Remove line breaker anywhere and semicolon at the end
-- 
2.41.0


From 82cfce09b145f8f3abad284bb61a5f7be058073c Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Fri, 28 Feb 2025 16:45:42 -0800
Subject: [PATCH 11/12] ignore test using json

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .../test/java/org/opensearch/sql/legacy/DateFunctionsIT.java    | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/integ-test/src/test/java/org/opensearch/sql/legacy/DateFunctionsIT.java b/integ-test/src/test/java/org/opensearch/sql/legacy/DateFunctionsIT.java
index d9a6849fc..81206cf76 100644
--- a/integ-test/src/test/java/org/opensearch/sql/legacy/DateFunctionsIT.java
+++ b/integ-test/src/test/java/org/opensearch/sql/legacy/DateFunctionsIT.java
@@ -17,6 +17,7 @@ import org.joda.time.DateTime;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 import org.json.JSONObject;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.opensearch.action.search.SearchResponse;
 import org.opensearch.common.xcontent.LoggingDeprecationHandler;
@@ -25,6 +26,7 @@ import org.opensearch.core.xcontent.NamedXContentRegistry;
 import org.opensearch.core.xcontent.XContentParser;
 import org.opensearch.search.SearchHit;
 
+@Ignore
 public class DateFunctionsIT extends SQLIntegTestCase {
 
   private static final String FROM = "FROM " + TestsConstants.TEST_INDEX_ONLINE;
-- 
2.41.0


From 5f38dd52f8c870a408a9ea9f6323df4e1bc90c22 Mon Sep 17 00:00:00 2001
From: Sean Kao <seankao@amazon.com>
Date: Fri, 28 Feb 2025 16:53:47 -0800
Subject: [PATCH 12/12] fix test case

Signed-off-by: Sean Kao <seankao@amazon.com>
---
 .../sql/legacy/unittest/query/DefaultQueryActionTest.java       | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java
index bf5d79855..4c6061ff5 100644
--- a/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java
+++ b/legacy/src/test/java/org/opensearch/sql/legacy/unittest/query/DefaultQueryActionTest.java
@@ -136,7 +136,7 @@ public class DefaultQueryActionTest {
       queryAction.checkAndSetScroll();
     }
 
-    Mockito.verify(mockRequestBuilder, times(4)).setSize(limit);
+    Mockito.verify(mockRequestBuilder, times(3)).setSize(limit);
     Mockito.verify(mockRequestBuilder, never()).setScroll(any(TimeValue.class));
 
     queryAction.setFormat(Format.JDBC);
-- 
2.41.0

