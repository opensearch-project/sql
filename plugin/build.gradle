import java.util.concurrent.Callable
import org.opensearch.gradle.dependencies.CompileOnlyResolvePlugin

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id 'java'
    id "io.freefair.lombok"
    id 'jacoco'
    id 'opensearch.opensearchplugin'
    id 'com.diffplug.spotless' version '6.22.0'
    id 'com.gradleup.shadow'
}

apply plugin: 'opensearch.pluginzip'
apply plugin: 'opensearch.rest-test'

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.TXT')
    noticeFile = rootProject.file('NOTICE')
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

opensearchplugin {
    name 'opensearch-sql'
    description 'OpenSearch SQL'
    classname 'org.opensearch.sql.plugin.SQLPlugin'
    extendedPlugins = ['opensearch-job-scheduler']
    licenseFile rootProject.file("LICENSE.txt")
    noticeFile rootProject.file("NOTICE")
}

publishing {
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
                name = 'opensearch-sql'
                description = 'OpenSearch SQL'
                groupId = "org.opensearch.plugin"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'OpenSearch'
                        url = 'https://github.com/opensearch-project/sql'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "Snapshots" //  optional target repository name
            url = "https://central.sonatype.com/repository/maven-snapshots/"
            credentials {
                username "$System.env.SONATYPE_USERNAME"
                password "$System.env.SONATYPE_PASSWORD"
            }
        }
    }
}

javadoc.enabled = false
loggerUsageCheck.enabled = false
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false

configurations.all {
    // conflict with spring-jcl
    resolutionStrategy.force "commons-logging:commons-logging:${commons_logging_version}"
    // enforce 2.12.6, https://github.com/opensearch-project/sql/issues/424
    resolutionStrategy.force "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    resolutionStrategy.force "commons-codec:commons-codec:${commons_codec_version}"
    resolutionStrategy.force "com.google.guava:guava:${guava_version}"
    resolutionStrategy.force 'com.google.guava:failureaccess:1.0.2'
    resolutionStrategy.force "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.jackson}"
    resolutionStrategy.force "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${versions.jackson}"
    resolutionStrategy.force "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"
    resolutionStrategy.force "com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}"
    resolutionStrategy.force "com.squareup.okhttp3:okhttp:4.12.0"
    resolutionStrategy.force "joda-time:joda-time:2.10.12"
    resolutionStrategy.force "org.slf4j:slf4j-api:1.7.36"
    resolutionStrategy.force "org.apache.httpcomponents:httpcore:4.4.15"
    resolutionStrategy.force "org.apache.httpcomponents:httpclient:4.5.13"
    resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.10"
    resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10"
    resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib-common:1.9.10"
}

configurations {
    zipArchive
}

compileJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}

compileTestJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        importOrder()
//        licenseHeader("/*\n" +
//                " * Copyright OpenSearch Contributors\n" +
//                " * SPDX-License-Identifier: Apache-2.0\n" +
//                " */\n\n")
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        googleJavaFormat('1.17.0').reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
    }
}

dependencies {
    compileOnly "org.opensearch:opensearch-job-scheduler-spi:${opensearch_build}"

    api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    api "com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}"
    api "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"

    api project(":ppl")
    api project(':legacy')
    api project(':opensearch')
    api project(':prometheus')
    api project(':datasources')
    api project(':async-query')

    testImplementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.14.19'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: "${hamcrest_version}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${versions.mockito}"
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${versions.mockito}"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    zipArchive group: 'org.opensearch.plugin', name:'opensearch-job-scheduler', version: "${opensearch_build}"
}

test {
    include '**/*Test.class'
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.TXT')
    noticeFile = rootProject.file('NOTICE')
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// ANTLR generated parser file is too large to be checked which caused licenseHeaders stuck.
licenseHeaders {
    enabled = true
    excludes = ['org/opensearch/sql/antlr/parser/**']
}

tasks.withType(licenseHeaders.class) {
    additionalLicense 'AL   ', 'Apache', 'Licensed under the Apache License, Version 2.0 (the "License")'
}

// TODO: fix forbidden APIs
// from police-man plugin, see https://github.com/policeman-tools/forbidden-apis/wiki/GradleUsage
forbiddenApis.ignoreFailures = true
// TODO: fix forbidden code patterns
// introduced by OpenSearch plugin
forbiddenPatterns {
    setEnabled(false)
}

// TODO: fix license. skip dependency license checks
dependencyLicenses.enabled = false

// We don't need to follow OpenSearch testing naming conventions.
// see https://github.com/elastic/elasticsearch/blob/323f312bbc829a63056a79ebe45adced5099f6e6/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/TestingConventionsTasks.java
// enable testingConventions check will cause errors like:  "Classes ending with [Tests] must subclass [LuceneTestCase]"
testingConventions.enabled = false

// TODO: need to verify the thirdPartyAudit
// currently it complains missing classes like ibatis, mysql etc, should not be a problem
thirdPartyAudit.enabled = false
tasks.named("publishShadowPublicationToMavenLocal") {
    dependsOn tasks.named("generatePomFileForNebulaPublication")
}
apply plugin: 'com.netflix.nebula.ospackage'
validateNebulaPom.enabled = false
generatePomFileForShadowPublication.enabled = false
validateShadowPom.enabled = false
//generatePomFileForShadowPublication.enabled = false
// This is afterEvaluate because the bundlePlugin ZIP task is updated afterEvaluate and changes the ZIP name to match the plugin name
afterEvaluate {
    tasks.named("bundlePlugin", Zip).configure { zipTask ->
        zipTask.doLast {
            def zipFile = zipTask.archiveFile.get().asFile
            println "Original bundlePlugin ZIP: ${zipFile.absolutePath}"

            // Create a temporary directory for processing
            def tempDir = file("$buildDir/tempBundle")
            delete(tempDir)
            tempDir.mkdirs()

            // Extract the ZIP into the temporary directory
            copy {
                from zipTree(zipFile)
                into tempDir
            }
            println "Extracted ZIP to: ${tempDir.absolutePath}"

            // Determine the relocated jar produced by shadowJar.
            def relocatedJar = shadowJar.archiveFile.get().asFile
            def jarName = relocatedJar.getName()
            println "Relocated jar to keep: ${jarName}"

            // Delete all jar files (files ending with .jar) that are not the relocated jar.
            fileTree(dir: tempDir, includes: ['**/*.jar']).each { File jarFile ->
                if (!jarFile.getName().equals(jarName)) {
                    println "Deleting jar file: ${jarFile.absolutePath}"
                    jarFile.delete()
                }
            }

            // Reassemble the ZIP using the remaining files
            ant.zip(destfile: zipFile) {
                fileset(dir: tempDir)
            }
            println "Final bundlePlugin ZIP updated: ${zipFile.absolutePath}"

            // Clean up the temporary directory
            delete(tempDir)
        }
    }

    ospackage {
        packageName = "${rootProject.name}"
        release = isSnapshot ? "0.1" : '1'
        version = "${project.version}" - "-SNAPSHOT"

        into '/usr/share/opensearch/plugins'
        from(zipTree(bundlePlugin.archivePath)) {
            into opensearchplugin.name
        }

        user 'root'
        permissionGroup 'root'
        fileMode 0644
        dirMode 0755

        requires('opensearch', versions.opensearch, EQUAL)
        packager = 'Amazon'
        vendor = 'Amazon'
        os = 'LINUX'
        prefix '/usr'

        license 'ASL-2.0'
        maintainer 'OpenSearch Team <opensearch@amazon.com>'
        url 'https://www.opensearch.org/downloads.html'
        summary '''
         SQL plugin for OpenSearch.
         Reference documentation can be found at https://opensearch.org/docs/latest/search-plugins/sql/index/.
    '''.stripIndent().replace('\n', ' ').trim()
    }

    buildRpm {
        arch = 'NOARCH'
        dependsOn 'assemble'
        finalizedBy 'renameRpm'
        task renameRpm(type: Copy) {
            from("$buildDir/distributions")
            into("$buildDir/distributions")
            include "$archiveFileName"
            rename "$archiveFileName", "${packageName}-${version}.rpm"
            doLast { delete file("$buildDir/distributions/$archiveFileName") }
        }
    }

    buildDeb {
        arch = 'all'
        dependsOn 'assemble'
        finalizedBy 'renameDeb'
        task renameDeb(type: Copy) {
            from("$buildDir/distributions")
            into("$buildDir/distributions")
            include "$archiveFileName"
            rename "$archiveFileName", "${packageName}-${version}.deb"
            doLast { delete file("$buildDir/distributions/$archiveFileName") }
        }
    }
}

def getJobSchedulerPlugin() {
    provider(new Callable<RegularFile>() {
        @Override
        RegularFile call() throws Exception {
            return new RegularFile() {
                @Override
                File getAsFile() {
                    return configurations.zipArchive.asFileTree.matching {
                        include '**/opensearch-job-scheduler*'
                    }.singleFile
                }
            }
        }
    })
}

testClusters.integTest {
    plugin(getJobSchedulerPlugin())
    plugin(project.tasks.bundlePlugin.archiveFile)
    testDistribution = "ARCHIVE"

    // debug with command, ./gradlew opensearch-sql:run -DdebugJVM. --debug-jvm does not work with keystore.
    if (System.getProperty("debugJVM") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'
    }

    // add customized keystore
    keystore 'plugins.query.federation.datasources.config', new File("$projectDir/src/test/resources/", 'datasources.json')
}

run {
    useCluster testClusters.integTest
}

def compileOnlyResolveableFiles = project.configurations.getByName(CompileOnlyResolvePlugin.RESOLVEABLE_COMPILE_ONLY_CONFIGURATION_NAME).files
shadowJar {
    configurations = [project.configurations.runtimeClasspath]
    exclude { details ->
        def file = details.file
        return compileOnlyResolveableFiles.contains(file)
    }

    destinationDirectory = file("${project.buildDir}/distributions")
    archiveClassifier.set(null)

    exclude 'META-INF/maven/com.google.guava/**'
    exclude 'com/google/thirdparty/**'
    exclude 'org/opensearch/jobscheduler/**'
    exclude 'org/apache/lucene/**'

    relocate 'com.google.common', 'shaded.com.google.common'
    relocate 'org.joda.time', 'shaded.org.joda.time'
}
