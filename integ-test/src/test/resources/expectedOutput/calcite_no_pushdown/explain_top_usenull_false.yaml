calcite:
  logical: |
    LogicalSystemLimit(fetch=[10000], type=[QUERY_SIZE_LIMIT])
      LogicalProject(gender=[$0], state=[$1], count=[$2])
        LogicalFilter(condition=[<=($3, 2)])
          LogicalProject(gender=[$0], state=[$1], count=[$2], _row_number_rare_top_=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC)])
            LogicalAggregate(group=[{0, 1}], count=[COUNT()])
              LogicalProject(gender=[$4], state=[$7])
                LogicalFilter(condition=[AND(IS NOT NULL($4), IS NOT NULL($7))])
                  CalciteLogicalIndexScan(table=[[OpenSearch, opensearch-sql_test_index_account]])
  physical: |
    EnumerableLimit(fetch=[10000])
      EnumerableCalc(expr#0..3=[{inputs}], expr#4=[2], expr#5=[<=($t3, $t4)], proj#0..2=[{exprs}], $condition=[$t5])
        EnumerableWindow(window#0=[window(partition {0} order by [2 DESC] rows between UNBOUNDED PRECEDING and CURRENT ROW aggs [ROW_NUMBER()])])
          EnumerableAggregate(group=[{4, 7}], count=[COUNT()])
            EnumerableCalc(expr#0..16=[{inputs}], expr#17=[IS NOT NULL($t4)], expr#18=[IS NOT NULL($t7)], expr#19=[AND($t17, $t18)], proj#0..16=[{exprs}], $condition=[$t19])
              CalciteEnumerableIndexScan(table=[[OpenSearch, opensearch-sql_test_index_account]])