{
  "calcite": {
    "logical": "LogicalSort(sort0=[$1], dir0=[ASC-nulls-first])\n  LogicalProject(count()=[$1], age=[$0])\n    LogicalAggregate(group=[{0}], count()=[COUNT()])\n      LogicalProject(age=[||(||(CASE(>=(CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE), 1.0E0), CAST(CAST(+(*(FLOOR(/(-($8, *(FLOOR(/(MIN($8) OVER (), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE)), *(FLOOR(/(MIN($8) OVER (), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE)))):INTEGER NOT NULL):VARCHAR NOT NULL, CAST(+(*(FLOOR(/(-($8, *(FLOOR(/(MIN($8) OVER (), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE)), *(FLOOR(/(MIN($8) OVER (), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE)))):VARCHAR NOT NULL), '-'), CASE(>=(CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE), 1.0E0), CAST(CAST(+(+(*(FLOOR(/(-($8, *(FLOOR(/(MIN($8) OVER (), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE)), *(FLOOR(/(MIN($8) OVER (), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))):INTEGER NOT NULL):VARCHAR NOT NULL, CAST(+(+(*(FLOOR(/(-($8, *(FLOOR(/(MIN($8) OVER (), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE)), *(FLOOR(/(MIN($8) OVER (), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))), CASE(>=(POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 11.0E0), POWER(10.0E0:DOUBLE, FLOOR(LOG10(-(MAX($8) OVER (), MIN($8) OVER ())))), 100.0E0:DOUBLE))):VARCHAR NOT NULL))])\n        CalciteLogicalIndexScan(table=[[OpenSearch, opensearch-sql_test_index_account]])\n",
    "physical": "EnumerableSort(sort0=[$1], dir0=[ASC-nulls-first])\n  EnumerableCalc(expr#0..1=[{inputs}], count()=[$t1], age=[$t0])\n    EnumerableAggregate(group=[{0}], count()=[COUNT()])\n      EnumerableCalc(expr#0..2=[{inputs}], expr#3=[10.0E0:DOUBLE], expr#4=[-($t1, $t2)], expr#5=[LOG10($t4)], expr#6=[FLOOR($t5)], expr#7=[POWER($t3, $t6)], expr#8=[11.0E0:DOUBLE], expr#9=[>=($t7, $t8)], expr#10=[100.0E0:DOUBLE], expr#11=[CASE($t9, $t7, $t10)], expr#12=[1.0E0:DOUBLE], expr#13=[>=($t11, $t12)], expr#14=[/($t2, $t11)], expr#15=[FLOOR($t14)], expr#16=[*($t15, $t11)], expr#17=[-($t0, $t16)], expr#18=[/($t17, $t11)], expr#19=[FLOOR($t18)], expr#20=[*($t19, $t11)], expr#21=[+($t20, $t16)], expr#22=[CAST($t21):INTEGER NOT NULL], expr#23=[CAST($t22):VARCHAR NOT NULL], expr#24=[CAST($t21):VARCHAR NOT NULL], expr#25=[CASE($t13, $t23, $t24)], expr#26=['-'], expr#27=[||($t25, $t26)], expr#28=[+($t21, $t11)], expr#29=[CAST($t28):INTEGER NOT NULL], expr#30=[CAST($t29):VARCHAR NOT NULL], expr#31=[CAST($t28):VARCHAR NOT NULL], expr#32=[CASE($t13, $t30, $t31)], expr#33=[||($t27, $t32)], age=[$t33])\n        EnumerableWindow(window#0=[window(aggs [MAX($0), MIN($0)])])\n          EnumerableCalc(expr#0..16=[{inputs}], age=[$t8])\n            CalciteEnumerableIndexScan(table=[[OpenSearch, opensearch-sql_test_index_account]])\n"
  }
}
