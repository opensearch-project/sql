/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'java-library'
    id "io.freefair.lombok"
    id 'jacoco'
}

ext {
    hadoop = "3.3.4"
    aws = "1.12.330"
}


dependencies {
    implementation project(':core')
    implementation group: 'org.opensearch', name: 'opensearch', version: "${opensearch_version}"

    // required by hadoop filesystem https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/filesystem/index.html.
    implementation("org.apache.hadoop:hadoop-common:${hadoop}") {
        exclude group: 'org.apache.zookeeper', module: 'zookeeper'
        exclude group: 'com.sun.jersey', module: 'jersey-json'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'org.apache.avro', module: 'avro'
        exclude group: 'org.eclipse.jetty', module: 'jetty-server'
    }
    constraints {
        implementation('com.fasterxml.woodstox:woodstox-core:6.4.0') {
            because 'https://www.mend.io/vulnerability-database/CVE-2022-40156'
        }
    }

    // required https://hadoop.apache.org/docs/stable/hadoop-aws/tools/hadoop-aws/index.html
    implementation("org.apache.hadoop:hadoop-aws:${hadoop}")
    implementation "com.amazonaws:aws-java-sdk-bundle:${aws}"

    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.12.4'
}



test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    if ('windows' == project.getProperties().getOrDefault('buildPlatform', 'linux')) {
        excludes = [
            '**/FileSystemStreamSourceTest.class'
        ]
    }
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it)
        }))
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                minimum = 0.0
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.0
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it)
        }))
    }
}
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
