/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import java.util.concurrent.Callable
import org.opensearch.gradle.testclusters.RunTask

plugins {
    id 'base'
    id 'com.wiredforcode.spawn'
    id "de.undercouch.download" version "5.3.0"
}

apply plugin: 'opensearch.testclusters'

def path = project(':').projectDir
// temporary fix, because currently we are under migration to new architecture. Need to run ./gradlew run from
// plugin module, and will only build ppl in it.
def plugin_path = project(':doctest').projectDir

task bootstrap(type: Exec) {
    inputs.file "$projectDir/bootstrap.sh"
    outputs.dir "$projectDir/.venv"

    commandLine 'sh', "$projectDir/bootstrap.sh"
}

task startPrometheus(type: SpawnProcessTask) {
    doFirst {
        download.run {
            src getPrometheusBinaryLocation()
            dest new File("$projectDir/bin", 'prometheus.tar.gz')
        }
        copy {
            from tarTree("$projectDir/bin/prometheus.tar.gz")
            into "$projectDir/bin"
        }
        file("$projectDir/bin").eachDir {
            if (it.name.startsWith("prometheus-")) {
                println "Renaming folder : " + it.name.toString()
                println it.renameTo("$projectDir/bin/prometheus")
            }
        }
    }
    command "$projectDir/bin/prometheus/prometheus --storage.tsdb.path=$projectDir/bin/prometheus/data --config.file=$projectDir/bin/prometheus/prometheus.yml"
    ready 'TSDB started'
    pidLockFileName '.prom.pid.lock'
}


//evaluationDependsOn(':')
task startOpenSearch(type: SpawnProcessTask) {
    command "${path}/gradlew -p ${plugin_path} runRestTestCluster"
    ready 'started'
}

task doctest(type: Exec, dependsOn: ['bootstrap']) {

    commandLine "$projectDir/bin/test-docs"

    doLast {
        println("Doctest Done")
    }
}

task stopOpenSearch(type: KillProcessTask)

task stopPrometheus() {

    doLast {
        def pidFile = new File(path, ".prom.pid.lock")
        if(!pidFile.exists()) {
            logger.quiet "No Prometheus server running!"
            return
        }

        def pid = pidFile.text
        def process = "kill $pid".execute()

        try {
            process.waitFor()
        } finally {
            pidFile.delete()
            file("$projectDir/bin/prometheus").deleteDir()
            file("$projectDir/bin/prometheus.tar.gz").delete()
        }
    }
}

stopPrometheus.mustRunAfter startPrometheus
doctest.dependsOn startOpenSearch
startOpenSearch.dependsOn startPrometheus
doctest.finalizedBy stopOpenSearch
stopOpenSearch.finalizedBy stopPrometheus
check.dependsOn doctest
clean.dependsOn(cleanBootstrap)

// 2.0.0-alpha1-SNAPSHOT -> 2.0.0.0-alpha1-SNAPSHOT
String opensearch_no_snapshot = opensearch_version.replace('-SNAPSHOT', '')
String[] version_tokens = opensearch_no_snapshot.tokenize('-')
String opensearch_build = version_tokens[0] + '.0'
if (version_tokens.length > 1) {
    opensearch_build += '-' + version_tokens[1]
}
String mlCommonsRemoteFile = 'https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/' + opensearch_no_snapshot + '/latest/linux/x64/tar/builds/opensearch/plugins/opensearch-ml-' + opensearch_build + '.zip'
String mlCommonsPlugin = 'opensearch-ml'

testClusters {
    docTestCluster {
        keystore 'plugins.query.federation.datasources.config', new File("$projectDir/datasource", 'datasources.json')
        // Disable loading of `ML-commons` plugin, because it might be unavailable (not released yet).
        /*
        plugin(provider(new Callable<RegularFile>(){
            @Override
            RegularFile call() throws Exception {
                return new RegularFile() {
                    @Override
                    File getAsFile() {
                        File dir = new File('./doctest/' + mlCommonsPlugin)
                        if (!dir.exists()) {
                            dir.mkdirs()
                        }
                        File f = new File(dir, mlCommonsPlugin + '-' + opensearch_build + '.zip')
                        if (!f.exists()) {
                            new URL(mlCommonsRemoteFile).withInputStream{ ins -> f.withOutputStream{ it << ins } }
                        }
                        return fileTree(mlCommonsPlugin).getSingleFile()
                    }
                }
            }
        }))
        */
        plugin ':opensearch-sql-plugin'
        testDistribution = 'integ_test'
    }
}
tasks.register("runRestTestCluster", RunTask) {
    description = 'Runs OpenSearch SQL plugin'
    useCluster testClusters.docTestCluster;
}
