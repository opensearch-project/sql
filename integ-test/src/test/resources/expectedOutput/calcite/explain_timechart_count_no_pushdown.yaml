calcite:
  logical: |
    LogicalSystemLimit(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC], fetch=[10000], type=[QUERY_SIZE_LIMIT])
      LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
        LogicalAggregate(group=[{0, 1}], count=[SUM($2)])
          LogicalUnion(all=[false])
            LogicalAggregate(group=[{0, 1}], actual_count=[SUM($2)])
              LogicalProject(@timestamp=[CAST($0):TIMESTAMP(0) NOT NULL], host=[CASE(IS NOT NULL($3), $1, CASE(IS NULL($1), null:NULL, 'OTHER'))], count=[$2])
                LogicalJoin(condition=[IS NOT DISTINCT FROM($1, $3)], joinType=[left])
                  LogicalProject(@timestamp=[$1], host=[$0], $f2_0=[$2])
                    LogicalAggregate(group=[{0, 1}], agg#0=[COUNT()])
                      LogicalProject(host=[$4], $f2=[SPAN($1, 1, 'm')])
                        CalciteLogicalIndexScan(table=[[OpenSearch, events]])
                  LogicalSort(sort0=[$1], dir0=[DESC], fetch=[10])
                    LogicalAggregate(group=[{1}], grand_total=[SUM($2)])
                      LogicalFilter(condition=[IS NOT NULL($1)])
                        LogicalProject(@timestamp=[$1], host=[$0], $f2_0=[$2])
                          LogicalAggregate(group=[{0, 1}], agg#0=[COUNT()])
                            LogicalProject(host=[$4], $f2=[SPAN($1, 1, 'm')])
                              CalciteLogicalIndexScan(table=[[OpenSearch, events]])
            LogicalProject(@timestamp=[CAST($0):TIMESTAMP(0) NOT NULL], host=[$1], count=[0])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalAggregate(group=[{0}])
                  LogicalProject(@timestamp=[$1])
                    LogicalAggregate(group=[{0, 1}], agg#0=[COUNT()])
                      LogicalProject(host=[$4], $f2=[SPAN($1, 1, 'm')])
                        CalciteLogicalIndexScan(table=[[OpenSearch, events]])
                LogicalAggregate(group=[{0}])
                  LogicalProject($f0=[CASE(IS NOT NULL($3), $1, CASE(IS NULL($1), null:NULL, 'OTHER'))])
                    LogicalJoin(condition=[IS NOT DISTINCT FROM($1, $3)], joinType=[left])
                      LogicalProject(@timestamp=[$1], host=[$0], $f2_0=[$2])
                        LogicalAggregate(group=[{0, 1}], agg#0=[COUNT()])
                          LogicalProject(host=[$4], $f2=[SPAN($1, 1, 'm')])
                            CalciteLogicalIndexScan(table=[[OpenSearch, events]])
                      LogicalSort(sort0=[$1], dir0=[DESC], fetch=[10])
                        LogicalAggregate(group=[{1}], grand_total=[SUM($2)])
                          LogicalFilter(condition=[IS NOT NULL($1)])
                            LogicalProject(@timestamp=[$1], host=[$0], $f2_0=[$2])
                              LogicalAggregate(group=[{0, 1}], agg#0=[COUNT()])
                                LogicalProject(host=[$4], $f2=[SPAN($1, 1, 'm')])
                                  CalciteLogicalIndexScan(table=[[OpenSearch, events]])
  physical: |
    EnumerableLimit(fetch=[10000])
      EnumerableSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])
        EnumerableAggregate(group=[{0, 1}], count=[$SUM0($2)])
          EnumerableUnion(all=[false])
            EnumerableAggregate(group=[{0, 1}], actual_count=[$SUM0($2)])
              EnumerableCalc(expr#0..4=[{inputs}], expr#5=[CAST($t0):TIMESTAMP(0) NOT NULL], expr#6=[IS NOT NULL($t3)], expr#7=[IS NULL($t1)], expr#8=[null:NULL], expr#9=['OTHER'], expr#10=[CASE($t7, $t8, $t9)], expr#11=[CASE($t6, $t1, $t10)], @timestamp=[$t5], host=[$t11], count=[$t2])
                EnumerableMergeJoin(condition=[=($1, $3)], joinType=[left])
                  EnumerableSort(sort0=[$1], dir0=[ASC])
                    EnumerableCalc(expr#0..2=[{inputs}], @timestamp=[$t1], host=[$t0], $f2_0=[$t2])
                      EnumerableAggregate(group=[{0, 1}], agg#0=[COUNT()])
                        EnumerableCalc(expr#0..15=[{inputs}], expr#16=[1], expr#17=['m'], expr#18=[SPAN($t1, $t16, $t17)], host=[$t4], $f2=[$t18])
                          CalciteEnumerableIndexScan(table=[[OpenSearch, events]])
                  EnumerableSort(sort0=[$0], dir0=[ASC])
                    EnumerableLimit(fetch=[10])
                      EnumerableSort(sort0=[$1], dir0=[DESC])
                        EnumerableAggregate(group=[{4}], grand_total=[COUNT()])
                          EnumerableCalc(expr#0..15=[{inputs}], expr#16=[IS NOT NULL($t4)], proj#0..15=[{exprs}], $condition=[$t16])
                            CalciteEnumerableIndexScan(table=[[OpenSearch, events]])
            EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t0):TIMESTAMP(0) NOT NULL], expr#3=[0], @timestamp=[$t2], host=[$t1], count=[$t3])
              EnumerableNestedLoopJoin(condition=[true], joinType=[inner])
                EnumerableAggregate(group=[{1}])
                  EnumerableCalc(expr#0..15=[{inputs}], expr#16=[1], expr#17=['m'], expr#18=[SPAN($t1, $t16, $t17)], host=[$t4], $f2=[$t18])
                    CalciteEnumerableIndexScan(table=[[OpenSearch, events]])
                EnumerableAggregate(group=[{0}])
                  EnumerableCalc(expr#0..2=[{inputs}], expr#3=[IS NOT NULL($t1)], expr#4=[IS NULL($t0)], expr#5=[null:NULL], expr#6=['OTHER'], expr#7=[CASE($t4, $t5, $t6)], expr#8=[CASE($t3, $t0, $t7)], $f0=[$t8])
                    EnumerableMergeJoin(condition=[=($0, $1)], joinType=[left])
                      EnumerableSort(sort0=[$0], dir0=[ASC])
                        EnumerableCalc(expr#0..1=[{inputs}], host=[$t0])
                          EnumerableAggregate(group=[{0, 1}])
                            EnumerableCalc(expr#0..15=[{inputs}], expr#16=[1], expr#17=['m'], expr#18=[SPAN($t1, $t16, $t17)], host=[$t4], $f2=[$t18])
                              CalciteEnumerableIndexScan(table=[[OpenSearch, events]])
                      EnumerableSort(sort0=[$0], dir0=[ASC])
                        EnumerableLimit(fetch=[10])
                          EnumerableSort(sort0=[$1], dir0=[DESC])
                            EnumerableAggregate(group=[{4}], grand_total=[COUNT()])
                              EnumerableCalc(expr#0..15=[{inputs}], expr#16=[IS NOT NULL($t4)], proj#0..15=[{exprs}], $condition=[$t16])
                                CalciteEnumerableIndexScan(table=[[OpenSearch, events]])
