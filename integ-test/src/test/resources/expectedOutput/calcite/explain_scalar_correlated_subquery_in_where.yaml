calcite:
  logical: |
    LogicalSystemLimit(fetch=[10000], type=[QUERY_SIZE_LIMIT])
      LogicalProject(id=[$2], name=[$0])
        LogicalFilter(condition=[=($2, $SCALAR_QUERY({
    LogicalAggregate(group=[{}], max(uid)=[MAX($0)])
      LogicalProject(uid=[$1])
        LogicalFilter(condition=[=($cor0.id, $1)])
          CalciteLogicalIndexScan(table=[[OpenSearch, opensearch-sql_test_index_work_information]])
    }))], variablesSet=[[$cor0]])
          CalciteLogicalIndexScan(table=[[OpenSearch, opensearch-sql_test_index_worker]])
  physical: |
    EnumerableLimit(fetch=[10000])
      EnumerableCalc(expr#0..1=[{inputs}], id=[$t1], name=[$t0])
        EnumerableHashJoin(condition=[=($1, $2)], joinType=[semi])
          CalciteEnumerableIndexScan(table=[[OpenSearch, opensearch-sql_test_index_worker]], PushDownContext=[[PROJECT->[name, id]], OpenSearchRequestBuilder(sourceBuilder={"from":0,"timeout":"1m","_source":{"includes":["name","id"],"excludes":[]}}, requestedTotalSize=2147483647, pageSize=null, startFrom=0)])
          EnumerableCalc(expr#0..1=[{inputs}], expr#2=[=($t0, $t1)], proj#0..1=[{exprs}], $condition=[$t2])
            CalciteEnumerableIndexScan(table=[[OpenSearch, opensearch-sql_test_index_work_information]], PushDownContext=[[PROJECT->[uid], FILTER->IS NOT NULL($0), AGGREGATION->rel#:LogicalAggregate.NONE.[](input=RelSubset#,group={0},max(uid)=MAX($1))], OpenSearchRequestBuilder(sourceBuilder={"from":0,"size":0,"timeout":"1m","query":{"exists":{"field":"uid","boost":1.0}},"_source":{"includes":["uid"],"excludes":[]},"aggregations":{"composite_buckets":{"composite":{"size":1000,"sources":[{"uid1":{"terms":{"field":"uid","missing_bucket":true,"missing_order":"first","order":"asc"}}}]},"aggregations":{"max(uid)":{"max":{"field":"uid"}}}}}}, requestedTotalSize=2147483647, pageSize=null, startFrom=0)])