schemaVersion: 2.0

timeout: 180

machine:
  env:
    RUNTIME_JDK_VERSION: 21
    WHISPER_NAMESPACE: "aidp-opensearch-dev"
    WHISPER_BUCKET: "rio-secrets"
    WHISPER_VERSION: 1.6.0
  baseImage: docker.apple.com/base-images/ubi9/java21-builder

pipelines:
  - name: pr-to-main-apple
    branchName: main-apple
    build:
      template: freestyle:v4:prb
      steps:
        - .rio/build.sh
    reports:
      junit:
        paths:
          - "**/test-results/**/*.xml"
    finally:
      notify:
        email:
          enabled: false

  - name: check-main-apple-on-commit
    branchName: main-apple
    build:
      template: freestyle:v4:build
      steps:
        - .rio/build.sh
    reports:
      junit:
        paths:
          - "**/test-results/**/*.xml"
    finally:
      radar:
        annotate: true
      notify:
        email:
          enabled: false
        commitStatus:
          enabled: true


  - name: sync-mirror
    branchName: main-apple
    machine:
      env:
        SSH_AUTH_SOCK: ${SSH_AUTH_SOCK_DEPLOY_KEY}
    trigger:
      # Run once an hour, at a random but consistent offset.
      timer: "@hourly"
      gitPush: false
    build:
        template: freestyle:v4:build
        steps:
            - export GIT_COMMITTER_NAME="opensearch_aidp bot"
            - export GIT_AUTHOR_NAME="${GIT_COMMITTER_NAME}"
            - export GIT_COMMITTER_EMAIL="opensearch_aidp_bot@apple.com"
            - export GIT_AUTHOR_EMAIL="${GIT_COMMITTER_EMAIL}"
            - git config --global user.name "${GIT_COMMITTER_NAME}"
            - git config --global user.email "${GIT_COMMITTER_EMAIL}"
            - ls -al .
            - echo $GIT_URL
            - GIT_REPO_BASE_NAME=$(echo $GIT_URL|awk -F/ '{print $NF}')
            - GIT_REPO_BASE_NAME_NO_EXT=$(echo $GIT_URL|awk -F/ '{print $NF}'|awk -F\. '{print $1}')
            # Mirror OSS repo
            - git clone -q  --mirror https://github.com/opensearch-project/${GIT_REPO_BASE_NAME}
            - cd ${GIT_REPO_BASE_NAME}
            - git remote set-url --push origin ${GIT_URL}
            - git fetch -p origin
            - git  push  -q --all ${GIT_URL}
            - cd ..

            # Step 2: Merge main into main-apple
            - git clone ${GIT_REPO_BASE_NAME} repo-merge
            - cd repo-merge
            - git remote set-url origin ${GIT_URL}
            - git fetch origin
            - git checkout main
            - git pull origin main
            - git checkout main-apple || git checkout -b main-apple origin/main-apple
            - git pull origin main-apple
            - git merge --no-edit main || echo "Merge conflict â€” manual resolution needed"
            - git push origin main-apple
