plugins {
    id 'base'
    id 'maven-publish'
}

group = 'org.opensearch'
version = '0.1.0-SNAPSHOT'

// Task to zip grammar files
task zipGrammarFiles(type: Zip) {
    archiveBaseName = 'opensearch-language-grammar-poc'
    archiveExtension = 'zip'

    from fileTree(dir: 'language-grammar/src/main/antlr4') {
        include '**/*.g4'
    }

    destinationDirectory = layout.buildDirectory.dir('distributions')

    doLast {
        println "Created grammar zip file: ${archiveFile.get()}"
    }
}

// Generate checksums for artifacts
task generateChecksums {
    dependsOn zipGrammarFiles

    doLast {
        def zipFile = zipGrammarFiles.archiveFile.get().asFile

        // Generate SHA-256 checksum
        ant.checksum(file: zipFile, algorithm: "SHA-256", fileext: ".sha256", format: "plaintext")

        // Generate SHA-512 checksum
        ant.checksum(file: zipFile, algorithm: "SHA-512", fileext: ".sha512", format: "plaintext")

        println "Generated checksums for: ${zipFile.name}"
    }
}

// Configure Maven publication
publishing {
    publications {
        grammar(MavenPublication) {
            artifactId = 'opensearch-language-grammar-poc'
            artifact zipGrammarFiles

            pom {
                name = 'OpenSearch Language Grammar'
                description = 'OpenSearch Language Grammar Files'
                packaging = 'zip'

                properties {
                    commitId = getCommitId()
                }
            }
        }
    }

    repositories {
        maven {
            name = 'snapshotRepo'
            // Use the environment variable for repository URL
            url = System.getenv('SNAPSHOT_REPO_URL') ?: 'https://aws.oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username = System.getenv('SONATYPE_USERNAME')
                password = System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}

// Helper method to get the git commit ID
def getCommitId() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--format=%H'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// Task to create initial repository structure if needed
task createRepoStructure {
    doLast {
        def username = System.getenv('SONATYPE_USERNAME')
        def password = System.getenv('SONATYPE_PASSWORD')
        def repoUrl = System.getenv('SNAPSHOT_REPO_URL') ?: 'https://aws.oss.sonatype.org/content/repositories/snapshots/'

        if (!username || !password) {
            throw new GradleException("Sonatype credentials not found in environment variables")
        }

        def tempDir = new File("${buildDir}/temp")
        tempDir.mkdirs()

        def placeholderFile = new File(tempDir, ".placeholder")
        placeholderFile.text = "Directory placeholder - ${new Date()}"

        def repoPath = "${repoUrl}org/opensearch/opensearch-language-grammar-poc/".toString()
        if (!repoPath.endsWith('/')) repoPath += '/'

        println "Creating repository directory structure at ${repoPath}"
        exec {
            commandLine 'curl', '-X', 'PUT',
                    '-u', "${username}:${password}",
                    '--upload-file', placeholderFile.absolutePath,
                    "${repoPath}.placeholder"
            ignoreExitValue = true
        }
    }
}

// Make publishing dependent on generating checksums
tasks.named('publish').configure {
    dependsOn generateChecksums, createRepoStructure
}

// Combined full publishing task
task publishGrammar {
    dependsOn publish

    doLast {
        println "Grammar files published successfully with commit ID: ${getCommitId()}"
        println "Published to repository: ${System.getenv('SNAPSHOT_REPO_URL') ?: 'https://aws.oss.sonatype.org/content/repositories/snapshots/'}"
    }
}