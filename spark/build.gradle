/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'java-library'
    id "io.freefair.lombok"
    id 'jacoco'
}

repositories {
    mavenCentral()
}

dependencies {
    api project(':core')
    implementation project(':datasources')

    implementation group: 'org.opensearch', name: 'opensearch', version: "${opensearch_version}"
    implementation group: 'org.json', name: 'json', version: '20231013'
    api group: 'com.amazonaws', name: 'aws-java-sdk-emr', version: "${aws_java_sdk_version}"
    api group: 'com.amazonaws', name: 'aws-java-sdk-emrserverless', version: "${aws_java_sdk_version}"
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'

    testImplementation(platform("org.junit:junit-bom:5.9.3"))

    testCompileOnly('org.junit.jupiter:junit-jupiter')
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.7.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.7.0'

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
        because 'allows tests to run from IDEs that bundle older version of launcher'
    }
}

test {
    useJUnitPlatform {
        includeEngines("junit-jupiter")
    }
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    dependsOn test
    executionData test
    reports {
        html.required = true
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    executionData test
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    'org.opensearch.sql.spark.data.constants.*',
            ]
            limit {
                counter = 'LINE'
                minimum = 1.0
            }
            limit {
                counter = 'BRANCH'
                minimum = 1.0
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
        }))
    }
}
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
