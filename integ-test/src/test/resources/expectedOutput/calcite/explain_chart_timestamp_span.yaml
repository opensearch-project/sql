calcite:
  logical: |
    LogicalSystemLimit(fetch=[10000], type=[QUERY_SIZE_LIMIT])
      LogicalAggregate(group=[{1, 2}], max(value)=[MAX($0)])
        LogicalProject(max(value)=[$0], timestamp=[$1], category=[CASE(IS NULL($2), 'NULL', <=($5, 10), $2, 'OTHER')])
          LogicalJoin(condition=[=($2, $3)], joinType=[left])
            LogicalProject(max(value)=[$2], timestamp=[$1], category=[$0])
              LogicalAggregate(group=[{0, 2}], max(value)=[MAX($1)])
                LogicalProject(category=[$1], value=[$2], timestamp0=[SPAN($3, 1, 'w')])
                  CalciteLogicalIndexScan(table=[[OpenSearch, opensearch-sql_test_index_time_data]])
            LogicalProject(category=[$0], __grand_total__=[$1], __row_number__=[ROW_NUMBER() OVER (ORDER BY $1 DESC NULLS LAST)])
              LogicalAggregate(group=[{1}], __grand_total__=[MAX($0)])
                LogicalProject(max(value)=[$2], category=[$0])
                  LogicalAggregate(group=[{0, 2}], max(value)=[MAX($1)])
                    LogicalProject(category=[$1], value=[$2], timestamp0=[SPAN($3, 1, 'w')])
                      CalciteLogicalIndexScan(table=[[OpenSearch, opensearch-sql_test_index_time_data]])
  physical: |
    EnumerableLimit(fetch=[10000])
      EnumerableAggregate(group=[{1, 2}], max(value)=[MAX($0)])
        EnumerableCalc(expr#0..4=[{inputs}], expr#5=[IS NULL($t2)], expr#6=['NULL'], expr#7=[10], expr#8=[<=($t4, $t7)], expr#9=['OTHER'], expr#10=[CASE($t5, $t6, $t8, $t2, $t9)], proj#0..1=[{exprs}], category=[$t10])
          EnumerableMergeJoin(condition=[=($2, $3)], joinType=[left])
            CalciteEnumerableIndexScan(table=[[OpenSearch, opensearch-sql_test_index_time_data]], PushDownContext=[[AGGREGATION->rel#:LogicalAggregate.NONE.[](input=RelSubset#,group={0, 2},max(value)=MAX($1)), PROJECT->[max(value), timestamp0, category], SORT->[2]], OpenSearchRequestBuilder(sourceBuilder={"from":0,"size":0,"timeout":"1m","aggregations":{"composite_buckets":{"composite":{"size":1000,"sources":[{"category":{"terms":{"field":"category","missing_bucket":true,"missing_order":"last","order":"asc"}}},{"timestamp0":{"date_histogram":{"field":"timestamp","missing_bucket":false,"order":"asc","calendar_interval":"1w"}}}]},"aggregations":{"max(value)":{"max":{"field":"value"}}}}}}, requestedTotalSize=2147483647, pageSize=null, startFrom=0)])
            EnumerableSort(sort0=[$0], dir0=[ASC])
              EnumerableCalc(expr#0..2=[{inputs}], category=[$t0], $1=[$t2])
                EnumerableWindow(window#0=[window(order by [1 DESC-nulls-last] rows between UNBOUNDED PRECEDING and CURRENT ROW aggs [ROW_NUMBER()])])
                  CalciteEnumerableIndexScan(table=[[OpenSearch, opensearch-sql_test_index_time_data]], PushDownContext=[[AGGREGATION->rel#:LogicalAggregate.NONE.[](input=RelSubset#,group={0},__grand_total__=MAX($1))], OpenSearchRequestBuilder(sourceBuilder={"from":0,"size":0,"timeout":"1m","aggregations":{"composite_buckets":{"composite":{"size":1000,"sources":[{"category":{"terms":{"field":"category","missing_bucket":true,"missing_order":"first","order":"asc"}}}]},"aggregations":{"__grand_total__":{"max":{"field":"value"}}}}}}, requestedTotalSize=2147483647, pageSize=null, startFrom=0)])
