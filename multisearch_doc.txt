Here is the SPL multisearch doc:


multisearch
Description
The multisearch command is a generating command that runs multiple streaming searches at the same time. This command requires at least two subsearches and allows only streaming operations in each subsearch. Examples of streaming searches include searches with the following commands: search, eval, where, fields, and rex. For more information, see Types of commands in the Search Manual.

Syntax
| multisearch <subsearch1> <subsearch2> <subsearch3> ...

Required arguments
<subsearch>
Syntax: "["search <logical-expression>"]"
Description: At least two streaming searches must be specified. See the search command for detailed information about the valid arguments for <logical-expression>.
To learn more, see About subsearches in the Search Manual.
Usage
The multisearch command is an event-generating command. See Command types.

Generating commands use a leading pipe character and should be the first command in a search.

The multisearch command doesn't support peer selection
You can't exclude search peers from multisearch searches because the multisearch command connects to all peers by default. For example, the following multisearch search connects to the indexer called myServer even though it is excluded using NOT:

| multisearch
[ search index=_audit NOT splunk_server=myServer]

Instead of using the multisearch command to exclude search peers from your search, you can use other commands such as append with search optimization turned off. If you don't turn off search optimization, Splunk software might internally convert the append command to the multisearch command in order to optimize the search and might not exclude the search peers.

You can turn off search optimization for a specific search by including the following command at the end of your search:

|noop search_optimization=false

For example, the following workaround uses the append command to exclude myServer:

index=_internal splunk_server=myServer
| append[| search index=_audit]
| noop search_optimization=false

See Optimization settings in the Search Manual.

Subsearch processing and limitations
With the multisearch command, the events from each subsearch are interleaved. Therefore the multisearch command is not restricted by the subsearch limitations.

Unlike the append command, the multisearch command does not run the subsearch to completion first. The following subsearch example with the append command is not the same as using the multisearch command.

index=a | eval type = "foo" | append [search index=b | eval mytype = "bar"]

Examples
Example 1:
Search for events from both index a and b. Use the eval command to add different fields to each set of results.

| multisearch [search index=a | eval type = "foo"] [search index=b | eval mytype = "bar"]

------------------------------------------------------------------------------------


Combining multiple data sources in SPL
Applies ToSplunk PlatformWritten by Splunk PartnerTekStream
Save as PDF

 Share


Depending on your use case or what you are looking to achieve with your Search Processing Language (SPL), you may need to query multiple data sources and merge the results.

The most intuitive command to use when these situations arise is the joincommand, but it tends to consume a lot of resources - especially when joining large datasets. This article describes the following additional commands and functions that can be applied when combining data from multiple sources, including their benefits and limitations.

OR
Append
Multisearch
Union
OR boolean operator
The most common use of the OR operator is to find multiple values in event data, for example, foo OR bar. This tells Splunk platform to find any event that contains either word. However, the OR operator is also commonly used to combine data from separate sources, for example (sourcetype=foo OR sourcetype=bar OR sourcetype=xyz).

Additional filtering can also be added to each data source, for example, (index=ABC loc=Ohio) OR (index=XYZ loc=California). When used in this manner, Splunk platform runs a single search, looking for any events that match any of the specified criteria in the searches. The required events are identified earlier in the search before calculations and manipulations are applied.

Learn more about using the OR operator in Splunk Docs for Splunk Enterprise or Splunk Cloud Platform.

Syntax for the OR operator
(<search1>) OR (<search2>) OR (<search3>)

Pros
Merges fields and event data from multiple data sources
Saves time since it does only a single search for events that match specified criteria and returns only the applicable events before any other manipulations
Cons
Only used with base searches
Does not allow calculations or manipulations per source, so any further calculations or manipulations need to be performed on all returned events
In the example below, the OR operator is used to combine fields from two different indexes and grouped by customer_id, which is common to both data sources.

2023-04-07_10-30-56.png

Append command
Appendis a streaming command used to add the results of a secondary search to the results of the primary search. The results from the appendcommand are usually appended to the bottom of the results from the primary search. After the append, you can use the table command to display the results as needed.

The secondary search must begin with a generating command. Append searches are not processed like subsearches where the subsearch is processed first. Instead, they are run at the point they are encountered in the SPL.

Learn more about using the appendcommand in Splunk Docs for Splunk Enterprise or Splunk Cloud Platform.

Syntax for the append command
<primary search> ... | append [<secondary search>]

Pros
Displays fields from multiple data sources
Cons
Subject to a maximum result rows limit of 50,000 by default
The secondary search must begin with a generating command
It can only run over historical data, not real-time data
In the example below, the count of web activities on the Splunk user interface is displayed from _internal index along with count per response from the _auditindex.

The last four rows are the results of the appended search. Both result sets share the count field. You can see that the append command tacks on the results of the subsearch to the end of the previous search, even though the results share the same field values.

2023-04-07_10-31-16.png

Multisearchcommand
Multisearchis a generating command that runs multiple streaming searches at the same time. It requires at least two searches and should only contain purely streaming operations such as eval, fields, or rexwithin each search.

One major benefit of the multisearchcommand is that it runs multiple searches simultaneously rather than sequentially as with the append command. This could save you some runtime especially when running more complex searches that include multiple calculations and/or inline extractions per data source. Results from the multisearchcommand are interleaved, not added to the end of the results as with the appendcommand.

Learn more about using the multisearchcommand in Splunk Docs for Splunk Enterprise or Splunk Cloud Platform.

Syntax for the multisearch command
| multisearch [<search1>] [<search2>] [<search3>] ...

Since multisearchis a generating command, it must be the first command in your SPL. It is important to note that the searches specified in square brackets above are not actual subsearches. They are full searches that produce separate sets of data that will be merged to get the expected results. A subsearch is a search within a primary or outer search. When a search contains a subsearch, the Splunk platform processes the subsearch first as a distinct search job and then runs the primary search.

Pros
Merges data from multiple data sources
Runs searches simultaneously, thereby saving runtime with complex searches
There is no limit to the number of result rows it can produce
Results from the multisearchcommand are interleaved, allowing for a more organized view
Cons
Requires that the searches are entirely distributable or streamable
Can be resource-intensive due to multiple searches running concurrently. This needs to be taken into consideration since it can cause search heads to crash
In the example shown below, the multisearchcommand is used to combine the action field from the web_logs index and queue field from the tutorial_games index using the evalcommand to view the sequence of events and identify any roadblocks in customer purchases. The results are interleaved using the _time field.

2023-04-07_10-31-39.png

Unioncommand
Unionis a generating command that is used to combine results from two or more datasets into one large dataset. The behavior of the unioncommand depends on whether the dataset is a streaming or non-streaming dataset. Centralized streaming or non-streaming datasets are processed the same as append command while distributable streaming datasets are processed the same as multisearchcommand.

Learn more about using the unioncommand in Splunk Docs for Splunk Enterprise or Splunk Cloud Platform.

Syntax for union command
| union [<search2>] [<search2>] … OR … | union [<search>]

However, with streaming datasets, instead of this syntax:
<streaming_dataset1> | union <streaming_dataset2>

Your search is more efficient with this syntax:
... | union <streaming_dataset1>, <streaming_dataset2>

Pros
Merges data from multiple data sources
Can process both streaming and non-streaming commands, though behavior will depend on the command type
As an added benefit of the max out argument, which specifies the maximum number of results to return from the subsearch. The default is 50,000 results. This value is the maxresultrowssetting in the [searchresults] stanza in the limits.conf file.
The example below is similar to the multisearchexample provided above and the results are the same. Both searches are distributable streaming, so they are “unioned” by using the same processing as the multisearchcommand.

2023-04-07_10-31-59.png

In the example below, because the headcommand is a centralized streaming command rather than a distributable streaming command, any subsearches that follow the headcommand are processed using the appendcommand. In other words, when a command forces the processing to the search head, all subsequent commands must also be processed on the search head.

2023-04-07_10-32-19.png

Comparing OR, Append, Multisearch, and Union
The table below shows a comparison of the four methods:

OR	Append	Multisearch	Union
Boolean Operator	Streaming command	Generating command	Generating command
Used in between searches	Used in between searches	Must be the first command in your SPL	Can be either the first command or used in between searches. Choose the most efficient method based on the command types needed
Results are interleaved	Results are added to the bottom of the table	Results are interleaved	Results are interleaved based on the time field
No limit to the number of rows that can be produced	Subject to a maximum of 50,000 result rows by default	No limit to the number of rows that can be produced	Default of 50,000 result rows with non-streaming searches. Can be changed using maxout argument.
Requires at least two base searches	Requires a primary search and a secondary one	Requires at least two searches	Requires at least two searches that will be “unioned”
Does not allow use of operators within the base searches	Allows both streaming and non-streaming operators	Allows only streaming operators	Allows both streaming and non-streaming operators
Does only a single search for events that match specified criteria	Appends results of the subsearch to the results of the primary search	Runs searches simultaneously	Behaves like multisearchwith streaming searches and like append with non-streaming
Next steps

Want to learn more about combining data sources in Splunk? Contact us today! TekStream accelerates clients’ digital transformation by navigating complex technology environments with a combination of technical expertise and staffing solutions. We guide clients’ decisions, quickly implement the right technologies with the right people, and keep them running for sustainable growth. Our battle-tested processes and methodology help companies with legacy systems get to the cloud faster, so they can be agile, reduce costs, and improve operational efficiencies. And with hundreds of deployments under our belt, we can guarantee on-time and on-budget project delivery. That’s why 97% of clients are repeat customers.


-------------------------------------------------------------------------------------------------
Types of commands
As you learn about Splunk SPL, you might hear the terms streaming, generating, transforming, orchestrating, and data processing used to describe the types of search commands. This topic explains what these terms mean and lists the commands that fall into each category.

There are six broad categorizations for almost all of the search commands:

distributable streaming
centralized streaming
transforming
generating
orchestrating
dataset processing
These categorizations are not mutually exclusive. Some commands fit into only one categorization. The stats command is an example of a command that fits only into the transforming categorization. Other commands can fit into multiple categorizations. For example a command can be streaming and also generating.

For a complete list of commands that are in each type, see Command types in the Search Reference.

Why the types of commands matter
Although it can be easy to get confused by the different categories of commands, having a solid understanding of the differences between types of commands will help you understand the implications for how and where data is processed, and optimize the performance of your searches.

For example, suppose you have a search that uses the following commands in this order:

search... | lookup... | where... | eval... | sort... | where... |...

The first 4 commands, from the search to eval commands, are distributable streaming commands that can all be processed on the indexers. As a result, when the search is run, the search head pushes the search to the indexers.

Since the sort command is not a distributable streaming command and needs all of the events in one place, the events that are returned from the first 4 commands are then sent back to the search head for sorting. As a result, the rest of the search after the sort command must also be processed on the search head. This is true even if the commands that follow sort are distributable streaming commands, like the second where command in the search.

Once search processing moves to the search head, it can't be moved back to the indexer. With this in mind, you should put non-streaming commands as late as possible in your searches to make them run efficiently. To find out more about how the types of commands used in searches can affect performance, see Write better searches.

Streaming and non-streaming commands
A streaming command operates on each event as it is returned by a search. Essentially one event in and one (or no) event out.

This diagram shows individual events being processed by a streaming command, one event after another.
For example, the eval command can create a new field, full_name, to contain the concatenation of the value in the first_name field, a space, and the value in the last_name field.

... | eval full_name = first_name." ".last_name

The eval command evaluates each event without considering the other events.

A non-streaming command requires the events from all of the indexers before the command can operate on the entire set of events. Many transforming commands are non-streaming commands. There are also several commands that are not transforming commands but are also non-streaming. These non-transforming, non-streaming commands are most often dataset processing commands.

This diagram shows a set of events that are collected and then processed together by a non-streaming command.
For example, before the sort command can begin to sort the events, the entire set of events must be received by the sort command. Other examples of non-streaming commands include dedup (in some modes), stats, and top.

Non-streaming commands force the entire set of events to the search head. This requires a lot of data movement and a loss of parallelism.

For information on how to mitigate the cost of non-streaming commands, see Write better searches in this manual.

Processing attributes
The following table describes the processing differences between some of the types of commands.

Distributable streaming	Centralized streaming	Data processing (non-streaming)	Transforming
Can run on indexers	Y	N	N	N
Can output before final input	Y	Y	N	N
Outputs events if inputs are events	Y	Y	Y	N
When a command is run it outputs either events or results, based on the type of command. For example, when you run the sort command, the input is events and the output is events in the sort order you specify. However, transforming commands do not output events. Transforming commands output results. For example the stats command outputs a table of calculated results. The events used to calculate those results are no longer available. After you run a transforming command, you can't run a command that expects events as an input.

Data processing commands are non-streaming commands that require the entire dataset before the command can run. These commands are not transforming, not distributable, not streaming, and not orchestrating. The sort command is an example of a data processing command. See Data processing commands.

Distributable streaming
A streaming command operates on each event returned by a search. For distributable streaming, the order of the events does not matter. A distributable streaming command is a command that can be run on the indexer, which improves processing time. The other commands in a search determine if the distributable streaming command is run on the indexer:

If all of the commands before the distributable streaming command can be run on the indexer, the distributable streaming command is run on the indexer.
If any one of the commands before the distributable streaming command must be run on the search head, the remaining commands in the search must be run on the search head. When the search processing moves to the search head, it can't be moved back to the indexer.
Distributable streaming commands can be applied to subsets of indexed data in a parallel manner. For example, the rex command is streaming. It extracts fields and adds them to events at search time.

Some of the common distributable streaming commands are: eval, fields, makemv, rename, regex, replace, strcat, typer, and where.

For a complete list of distributable streaming commands, see Streaming commands in the Search Reference.

Centralized streaming
For centralized streaming commands, the order of the events matters. A centralized streaming command applies a transformation to each event returned by a search. But unlike distributable streaming commands, a centralized streaming command only works on the search head. You might also hear the term "stateful streaming" to describe these commands.

Centralized streaming commands include: head, streamstats, some modes of dedup, and some modes of cluster.

Transforming
A transforming command orders the search results into a data table. These commands "transform" the specified cell values for each event into numerical values that Splunk software can use for statistical purposes. Transforming commands are not streaming. Also, transforming commands are required to transform search result data into the data structures that are required for visualizations such as column, bar, line, area, and pie charts.

Transforming commands include: chart, timechart, stats, top, rare, and addtotals when it is used to calculate column totals (not row totals).

For more information about transforming commands and their role in create statistical tables and chart visualizations, see About transforming commands and searches in the this manual.

For a complete list of transforming commands, see Transforming commands in the Search Reference.

Generating
A generating command returns information or generates results. Some generating commands can return information from an index, a data model, a lookup, or a CSV file without any transformations to the information.  Other generating commands generate results, usually for testing purposes.

Generating commands are either event-generating (distributable or centralized) or report-generating. Most report-generating commands are also centralized. Depending on which type the command is, the results are returned in a list or a table.

Generating commands do not expect or require an input. Generating commands are usually invoked at the beginning of the search and with a leading pipe. That is, there cannot be a search piped into a generating command. The exception to this is the search command, because it is implicit at the start of a search and does not need to be invoked.

Examples of generating commands include: dbinspect, datamodel, inputcsv, inputlookup, makeresults, metadata, pivot, search, and tstats

For a complete list of generating commands, see Generating commands in the Search Reference.

A comment inserted before a generating command causes the search to fail. For example, the following search fails because the commented text precedes tstats, which is a generating command: | ```This search returns an error``` | tstats count WHERE host=x BY source.

Orchestrating
An orchestrating command is a command that controls some aspect of how the search is processed. It does not directly affect the final result set of the search. For example, you might apply an orchestrating command to a search to enable or disable a search optimization that helps the overall search complete faster.

Examples of orchestrating commands include redistribute, noop, and localop. The lookup command also becomes an orchestrating command when you use it with the local=t argument.

Dataset processing
There are a handful of commands that require the entire dataset before the command can run. These commands are referred to as dataset processing commands. These commands are not transforming, not distributable, not streaming, and not orchestrating. Some of these commands fit into other types in specific situations or when specific arguments are used.

Examples of data processing commands include: sort, eventstats, and some modes of cluster, dedup, and fillnull.

For a complete list of dataset processing commands, see Dataset processing commands in the Search Reference.