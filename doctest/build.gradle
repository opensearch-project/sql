/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import java.util.concurrent.Callable
import org.opensearch.gradle.testclusters.RunTask

plugins {
    id "com.wiredforcode.spawn" version "0.8.2"
    id 'base'
}

apply plugin: 'opensearch.testclusters'

def path = project(':').projectDir
// temporary fix, because currently we are under migration to new architecture. Need to run ./gradlew run from
// plugin module, and will only build ppl in it.
def plugin_path = project(':doctest').projectDir

task bootstrap(type: Exec) {
    inputs.file "$projectDir/bootstrap.sh"
    outputs.dir "$projectDir/.venv"

    commandLine 'sh', "$projectDir/bootstrap.sh"
}

//evaluationDependsOn(':')
task startOpenSearch(type: SpawnProcessTask) {
    command "${path}/gradlew -p ${plugin_path} runRestTestCluster"
    ready 'started'
}

task doctest(type: Exec, dependsOn: ['bootstrap']) {

    commandLine "$projectDir/bin/test-docs"

    doLast {
        println("Doctest Done")
    }
}

task stopOpenSearch(type: KillProcessTask)

doctest.dependsOn startOpenSearch
doctest.finalizedBy stopOpenSearch

build.dependsOn doctest
clean.dependsOn(cleanBootstrap)

String mlCommonsRemoteFile = 'https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.3.4/latest/linux/x64/tar/builds/opensearch/plugins/opensearch-ml-1.3.4.0.zip'
String mlCommonsPlugin = "ml-commons"

testClusters {
    docTestCluster {
        plugin(provider(new Callable<RegularFile>(){
            @Override
            RegularFile call() throws Exception {
                return new RegularFile() {
                    @Override
                    File getAsFile() {
                        File dir = new File('./doctest/' + mlCommonsPlugin)
                        if (!dir.exists()) {
                            dir.mkdirs()
                        }
                        File f = new File(mlCommonsPlugin, dir)
                        if (!f.exists()) {
                            new URL(mlCommonsRemoteFile).withInputStream{ ins -> f.withOutputStream{ it << ins }}
                        }
                        return fileTree(mlCommonsPlugin).getSingleFile()
                    }
                }
            }
        }))

        testDistribution = 'integ_test'
    }
}
tasks.register("runRestTestCluster", RunTask) {
    description = 'Runs OpenSearch SQL plugin'
    useCluster testClusters.docTestCluster;
}
