{
  "calcite": {
    "logical": "LogicalProject(firstname=[$1], age=[$8])\n  LogicalFilter(condition=[AND(=($1, 'Amber'), =(-($8, 2), 30))])\n    CalciteLogicalIndexScan(table=[[OpenSearch, opensearch-sql_test_index_account]])\n",
    "physical": "CalciteEnumerableIndexScan(table=[[OpenSearch, opensearch-sql_test_index_account]], PushDownContext=[[PROJECT->[firstname, age], FILTER->AND(=($0, 'Amber'), =(-($1, 2), 30))], OpenSearchRequestBuilder(sourceBuilder={\"from\":0,\"timeout\":\"1m\",\"query\":{\"bool\":{\"must\":[{\"term\":{\"firstname.keyword\":{\"value\":\"Amber\",\"boost\":1.0}}},{\"script\":{\"script\":{\"source\":\"public Object[] apply(Object root0) {\\n  final Long input_value = (Long) ((org.apache.calcite.DataContext) root0).get(\\\"age\\\");\\n  final Long binary_call_value = input_value == null ? null : Long.valueOf(input_value.longValue() - 2L);\\n  return new Object[] {\\n      binary_call_value == null ? null : Boolean.valueOf(binary_call_value.longValue() == 30L)};\\n}\\n\\n\",\"lang\":\"opensearch_compounded_script\",\"options\":{\"engine_type\":\"calcite\"},\"params\":{\"utcTimestamp\":*}},\"boost\":1.0}}],\"adjust_pure_negative\":true,\"boost\":1.0}},\"_source\":{\"includes\":[\"firstname\",\"age\"],\"excludes\":[]},\"sort\":[{\"_doc\":{\"order\":\"asc\"}}]}, requestedTotalSize=2147483647, pageSize=null, startFrom=0)])\n"
  }
}
