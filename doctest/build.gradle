/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import java.util.concurrent.Callable
import org.opensearch.gradle.testclusters.RunTask

plugins {
    id 'base'
    id 'com.wiredforcode.spawn'
    id "de.undercouch.download" version "5.3.0"
}

apply plugin: 'opensearch.testclusters'

def path = project(':').projectDir
// temporary fix, because currently we are under migration to new architecture. Need to run ./gradlew run from
// plugin module, and will only build ppl in it.
def plugin_path = project(':doctest').projectDir

task cloneSqlCli(type: Exec) {
    // clone the sql-cli repo locally
    commandLine 'git', 'clone', 'https://github.com/opensearch-project/sql-cli.git'
}

task bootstrap(type: Exec, dependsOn: ['cloneSqlCli']) {
    inputs.file "$projectDir/bootstrap.sh"
    outputs.dir "$projectDir/.venv"

    commandLine 'sh', "$projectDir/bootstrap.sh"

}

String SPARK_VERSION = "spark-3.3.2"
String SPARK_BINARY = "${SPARK_VERSION}-bin-hadoop3";

task startMaster(type: SpawnProcessTask) {
    doFirst {
        download.run {
            src "https://dlcdn.apache.org/spark/${SPARK_VERSION}/${SPARK_BINARY}.tgz"
            dest new File("$projectDir/bin", "${SPARK_BINARY}.tgz")
            overwrite false
        }
        copy {
            from tarTree("$projectDir/bin/${SPARK_BINARY}.tgz")
            into "$projectDir/bin"
        }
    }
    command "$projectDir/bin/${SPARK_BINARY}/bin/spark-class org.apache.spark.deploy.master.Master -h localhost -p 7077 --webui-port 8080"
    ready 'started'
    pidLockFileName '.spark-master.pid.lock'
}

task startWorker(type: SpawnProcessTask, dependsOn: startMaster) {
    command "$projectDir/bin/${SPARK_BINARY}/bin/spark-class org.apache.spark.deploy.worker.Worker spark://localhost:7077"
    ready 'started'
    pidLockFileName '.spark-worker.pid.lock'
}

task startThrift(type: SpawnProcessTask, dependsOn: startWorker) {
    command "$projectDir/bin/${SPARK_BINARY}/bin/spark-submit --class org.apache.spark.sql.hive.thriftserver.HiveThriftServer2 spark://localhost:7077"
    ready 'started'
    pidLockFileName '.spark-thriftserver.pid.lock'
}

task stopMaster(type: KillProcessTask) {
    pidLockFileName '.spark-master.pid.lock'
}

task stopWorker(type: KillProcessTask, dependsOn: stopMaster) {
    pidLockFileName '.spark-worker.pid.lock'
}

task stopThrift(type: KillProcessTask, dependsOn: stopWorker) {
    pidLockFileName '.spark-thriftserver.pid.lock'
    doLast {
        file("$projectDir/bin/${SPARK_BINARY}").deleteDir()
        file("$projectDir/bin/${SPARK_BINARY}.tgz").delete()
    }
}

task startPrometheus(type: SpawnProcessTask) {
    doFirst {
        download.run {
            src getPrometheusBinaryLocation()
            dest new File("$projectDir/bin", 'prometheus.tar.gz')
        }
        copy {
            from tarTree("$projectDir/bin/prometheus.tar.gz")
            into "$projectDir/bin"
        }
        file("$projectDir/bin").eachDir {
            if (it.name.startsWith("prometheus-")) {
                println "Renaming folder : " + it.name.toString()
                println it.renameTo("$projectDir/bin/prometheus")
            }
        }
    }
    command "$projectDir/bin/prometheus/prometheus --storage.tsdb.path=$projectDir/bin/prometheus/data --config.file=$projectDir/bin/prometheus/prometheus.yml"
    ready 'TSDB started'
    pidLockFileName '.prom.pid.lock'
}

//evaluationDependsOn(':')
task startOpenSearch(type: SpawnProcessTask) {
    if( getOSFamilyType() == "windows") {
        command "${path}\\gradlew.bat -p ${plugin_path} runRestTestCluster"
    }
    else {
        command "${path}/gradlew -p ${plugin_path} runRestTestCluster"
    }
    ready 'started'
}

task doctest(type: Exec, dependsOn: ['bootstrap']) {

    commandLine "$projectDir/bin/test-docs"

    doLast {
        // remove the cloned sql-cli folder
        file("$projectDir/sql-cli").deleteDir()
        println("Doctest Done")
    }
}

task stopOpenSearch(type: KillProcessTask, dependsOn: [stopThrift])

task stopPrometheus() {

    doLast {
        def pidFile = new File(path, ".prom.pid.lock")
        if (!pidFile.exists()) {
            logger.quiet "No Prometheus server running!"
            return
        }

        def pid = pidFile.text
        def process = "kill $pid".execute()

        try {
            process.waitFor()
        } finally {
            pidFile.delete()
            file("$projectDir/bin/prometheus").deleteDir()
            file("$projectDir/bin/prometheus.tar.gz").delete()
        }
    }
}


clean.doLast {
    file("$projectDir/bin/${SPARK_BINARY}").deleteDir()
    file("$projectDir/bin/${SPARK_BINARY}.tgz").delete()
}

if(getOSFamilyType() != "windows") {
    stopPrometheus.mustRunAfter startPrometheus
    startOpenSearch.dependsOn startPrometheus
    stopOpenSearch.finalizedBy stopPrometheus
}
doctest.dependsOn startOpenSearch
doctest.finalizedBy stopOpenSearch
check.dependsOn doctest
clean.dependsOn(cleanBootstrap)

testClusters {
    docTestCluster {
        keystore 'plugins.query.federation.datasources.config', new File("$projectDir/datasource", 'datasources.json')
        plugin ':opensearch-sql-plugin'
        testDistribution = 'integ_test'
    }
}
tasks.register("runRestTestCluster", RunTask) {
    description = 'Runs OpenSearch SQL plugin'
    useCluster testClusters.docTestCluster;
}
